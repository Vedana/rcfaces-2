<camelia-components>
	<attributeDoc id="acceleratorKey">
		<doc><![CDATA[
		A string that indicates the (composed) key used to execute an action from the keyboard.
]]></doc>
		<tooltip><![CDATA[
		[Shift|Alt|Ctrl] + &lt;Any key&gt;
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>key</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="accessKey">
		<doc><![CDATA[
		A string that indicates the alphanumeric key used to execute an action from the keyboard (in conjunction with a alteration key ex : Alt).
]]></doc>
		<tooltip><![CDATA[
		Alt + &lt;Any alphanumeric key&gt;
		<BR>The letter|number will be highlighted when the alteration key is pressed.
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>alphanumeric</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="action">
		<doc><![CDATA[
		A string that indicates the url to activate on the server when the component is actionned through a key mapping on the faces config file. 
]]></doc>
		<tooltip><![CDATA[
		cf. <A href="http://java.sun.com/dtd/web-facesconfig_1_0.dtd">faces config</A>
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="actionListener">
		<doc><![CDATA[
		Executed when the the component is activated by the user.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="alignment">
		<doc><![CDATA[
		A string that represents the alignement of the data in the component.
		<ul><li>
		left
		</li><li>
		right
		</li><li>
		center
		</li></ul>
]]></doc>
		<tooltip><![CDATA[
		values : right, left, center
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="ascending">
		<doc><![CDATA[
		A boolean value that indicates the sorting direction for the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="asyncRenderMode">
		<doc><![CDATA[
		A string that indicates the rendering mode for asynchronous capable component.
		<LI>
		<UL>
		If value is "none", the rendering is synchronous (made with the englobing page rendering).
		</UL>
		<UL>
		If value is "buffer", the rendering is calculated with the page and may contains HTML elements, it is sent to the client only when needed (asynchrponously).
		</UL>
		<UL>
		If value is "tree", the rendering is calculated only when needed (the HTML elements are ignored)
		</UL>
		</LI>
]]></doc>
		<tooltip><![CDATA[
		none|buffer|tree
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>asyncRenderMode</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="attributesLocale">
		<doc><![CDATA[
		A string value that indicates the locale associated with the component.
]]></doc>
		<tooltip><![CDATA[
		ex : fr ;-)
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value that indicates the locale associated with the component.
		@return string for locale
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value that indicates the locale associated with the component.
		@param attributesLocale string for locale
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>locale</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="autoCompletion">
		<doc><![CDATA[
		A boolean value indicating if the component should complete automaticaly the user entry.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value indicating if the component should complete automaticaly the user entry.
		@return true if the user entry must completed
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value indicating if the component should complete automaticaly the user entry.
		@param autoCompletion true if the user entry must completed
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="autoFilter">
		<doc><![CDATA[
		Experimental
		A boolean value indicating if the component should apply filter automatically.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value indicating if the component should apply filter automatically.
		@return true if the component should apply filter
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value indicating if the component should apply filter automatically.
		@param autoFilter true if the component should apply filter
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="autoTab">
		<doc><![CDATA[
		A boolean value indicating if the focus should move automatically to the next element when the entry is completed.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="backgroundColor">
		<doc><![CDATA[
		A color value (as specified by CSS) for the background.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>color</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="backgroundImageHorizontalPosition">
		<doc><![CDATA[
		A string indicating the horizontal positionning for the background image.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>position</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="backgroundImageHorizontalRepeat">
		<doc><![CDATA[
		A boolean value indicating wether the background image should be repeated horizontally or not.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="backgroundImageURL">
		<doc><![CDATA[
		An url string pointing to the background image.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="backgroundImageVerticalPosition">
		<doc><![CDATA[
		A string indicating the vertical positionning for the background image.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>position</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="backgroundImageVerticalRepeat">
		<doc><![CDATA[
		A boolean value indicating wether the background image should be repeated vertically or not.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="base">
		<doc><![CDATA[
		A string value indicating the base HRef. If the key word "context" is used the base HRef is calculated from the context.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value indicating the base HRef. If the key word "context" is used the base HRef is calculated from the context.
		@return base HRef
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value indicating the base HRef. If the key word "context" is used the base HRef is calculated from the context.
		@param base base HRef
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="baseName">
		<doc><![CDATA[
		Base name of the resource bundle to be loaded.
		A string indicating the fully qualified name of a resources bundle (property file).
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string indicating the fully qualified name of a resources bundle (property file).
		@return base name of the resource bundle to be loaded.
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string indicating the fully qualified name of a resources bundle (property file).
		@param baseName base name of the resource bundle to be loaded.
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>className</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="binding">
		<doc><![CDATA[
		The value binding expression linking this component to a property in a backing bean.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>bean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="blurListener">
		<doc><![CDATA[
		Executed when the focus quits the component.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="border">
		<doc><![CDATA[
		A boolean value that indicates if the component should show a border or not.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="borderType">
		<doc><![CDATA[
		A string that indicates the type of border the component should show.
		Check for availability for a particular component.
]]></doc>
		<tooltip><![CDATA[
		predefined values : none, solid, relief, flat, rounded
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="bundleName">
		<doc><![CDATA[
		A string value specifying the name to be used on the client side to access the resource bundle.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value specifying the name to be used on the client side to access the resource bundle.
		@return bundle name
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value specifying the name to be used on the client side to access the resource bundle.
		@param bundleName bundle name
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="bundleVar">
		<doc><![CDATA[
		A string value specifying the name of a request scope attribute under which the resource bundle will be exposed as a Map. 
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="caseSensitive">
		<doc><![CDATA[
		A boolean value indicating if the component should consider the case of the user input when using the data.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value indicating if the component should consider the case of the user input when using the data.
		@return true if case sensitive
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value indicating if the component should consider the case of the user input when using the data.
		@param caseSensitive <code>true</code> if case sensitive
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="cellImageURL">
		<doc><![CDATA[
		An url string pointing to the image.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an url string pointing to the image.
		@return image url
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an url string pointing to the image.
		@param cellImageURL image url for the cell
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="cellStyleClass">
		<doc><![CDATA[
		A space-separated list of CSS style class(es) to be applied when this cell is rendered. This value will be passed through as the "class" attribute on generated markup.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a space-separated list of CSS style class(es) to be applied when this cell is rendered. This value will be passed through as the "class" attribute on generated markup.
		@return list of CSS style classes
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a space-separated list of CSS style class(es) to be applied when this cell is rendered. This value will be passed through as the "class" attribute on generated markup.
		@param cellStyleClass list of CSS style classes
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>styleCLass</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="cellToolTipText">
		<doc><![CDATA[
		A string value containing the text that will appear when the pointer hover the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value containing the text that will appear when the pointer hover the component.
		@return tool tip text
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value containing the text that will appear when the pointer hover the component.
		@param cellToolTipText tool tip text
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="checkCardinality">
		<doc><![CDATA[
		A string indicating the cardinality (number of check allowed) for this componenent.
]]></doc>
		<tooltip><![CDATA[
		?|+|*|1|one|zeroMany|oneMany|optional|default default=zeroMany
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>cardinality</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="checkedValues">
		<doc><![CDATA[
		A table of the values associated with checked nodes for the component. (Binding only)
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>table</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="checkListener">
		<doc><![CDATA[
		Executed when the component is checked.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="checkValues">
		<doc><![CDATA[
		A table of the values check for the component. (Binding only)
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>table</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="checkable">
		<doc><![CDATA[
		A boolean value indcating wether the component can be checked. cf. checkCardinality.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="checked">
		<doc><![CDATA[
		A boolean value indicating the state of the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="clientCheckFullState">
		<doc><![CDATA[
		A boolean value indicating wether the client should know about the component's full state even if only a part of the data is present (AJAX).
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value indicating wether the client should know about the component's full state even if only a part of the data is present (AJAX).
		@return boolean
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value indicating wether the client should know about the component's full state even if only a part of the data is present (AJAX).
		@param clientCheckFullState boolean
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="clientDatesStrategy">
		<doc><![CDATA[
		A string indicating the AJAX transfert strategy for the calendar component : the dates' characteristics (styleClass, toolTip ...).
		Those characteristics can be retrieved by month, year or totally.
]]></doc>
		<tooltip><![CDATA[
		all|year|month|default default=all
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="clientSelectionFullState">
		<doc><![CDATA[
		A boolean value indicating wether the client should know about the component's full state even if only a part of the data is present (AJAX).
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value indicating wether the client should know about the component's full state even if only a part of the data is present (AJAX).
		@return boolean
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value indicating wether the client should know about the component's full state even if only a part of the data is present (AJAX).
		@param clientSelectionFullState boolean
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="clientSide">
		<doc><![CDATA[
		A boolean value indicating wether the validation parameter should be present on the client side.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="clientValidator">
		<doc><![CDATA[
		A key identifying a validation process to apply to the component. this validation process can handle parameters. cf. the clientValidator doc.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="closable">
		<doc><![CDATA[
		Experimental : Do not use !
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="closeListener">
		<doc><![CDATA[
		Executed when the component is closed.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="collapseEffect">
		<doc><![CDATA[
		A string value indicating the effect to use when transionning from one state to the other. 
		The provided effects are slideUp and slideUpTrans but the list can be augmented.
]]></doc>
		<tooltip><![CDATA[
		slideUp|slideUpTrans
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value indicating the effect to use when transionning from one state to the other. 
		@return the effect : slideUp|slideUpTrans
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value indicating the effect to use when transionning from one state to the other. 
		@param collapseEffect the effect : slideUp|slideUpTrans
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="collapsedText">
		<doc><![CDATA[
		A string value specifying the text to show when the component is collapsed.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value specifying the text to show when the component is collapsed.
		@return text
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value specifying the text to show when the component is collapsed.
		@param collapsedText text
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="collapsed">
		<doc><![CDATA[
		A boolean value indicating wether the component is collapsed.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="columnNumber">
		<doc><![CDATA[
		An int value holding the width of the component in characters : x characters translates into y pixels width.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an int value holding the width of the component in characters : x characters translates into y pixels width.
		@return width in characters
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an int value holding the width of the component in characters : x characters translates into y pixels width.
		@param columnNumber width in characters
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="columnStyleClass">
		<doc><![CDATA[
		A space-separated list of CSS style class(es) to be applied when this column is rendered. This value will be passed through as the "class" attribute on generated markup.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a space-separated list of CSS style class(es) to be applied when this column is rendered. This value will be passed through as the "class" attribute on generated markup.
		@return list of CSS style classes
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a space-separated list of CSS style class(es) to be applied when this column is rendered. This value will be passed through as the "class" attribute on generated markup.
		@param columnStyleClass list of CSS style classes
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>styleClass</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="columnsOrder">
		<doc><![CDATA[
		A list of the columns' id which represents their order from left to right.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a list of the columns' id which represents their order from left to right.
		@return ordered list of columns' id
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a list of the columns' id which represents their order from left to right.
		@param columnsOrder ordered list of columns' id
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="componentRules">
		<doc><![CDATA[
		Experimental ! Do not use !
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="converter">
		<doc><![CDATA[
		The converter id to use. as specified in faces-config.xml.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="cycleValue">
		<doc><![CDATA[
		A boolean value indicating wether to start from the beginning when reaching the end or not. And vice versa.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value indicating wether to start from the beginning when reaching the end or not. And vice versa.
		@return true if the component should cycle
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value indicating wether to start from the beginning when reaching the end or not. And vice versa.
		@param cycleValue true if the component should cycle
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="date">
		<doc><![CDATA[
		The date value. (format : according the the declared locale)
]]></doc>
		<tooltip><![CDATA[
		format : according the the declared locale.
]]></tooltip>
		<getter-doc><![CDATA[
		Returns the date value.
		@return date value
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets the date value.
		@param date date value
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>date</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="dateFormat">
		<doc><![CDATA[
		A string specifying the format to apply to the date value.
]]></doc>
		<tooltip><![CDATA[
		identical syntax to the Java date format.
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string specifying the format to apply to the date value.
		@return date format
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string specifying the format to apply to the date value.
		@param dateFormat format
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>dateFormat</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="defaultCellImageURL">
		<doc><![CDATA[
		An url string pointing to the default image.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an url string pointing to the default image.
		@return image url
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an url string pointing to the default image.
		@param defaultCellImageURL image url
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="defaultDate">
		<doc><![CDATA[
		The date selected by default.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns the date selected by default.
		@return default date
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets the date to select by default.
		@param defaultDate default date
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>date</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="defaultDisabledImageURL">
		<doc><![CDATA[
		An url string pointing to the default image for the disabled state.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an url string pointing to the default image for the disabled state.
		@return disabled image url
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an url string pointing to the default image for the disabled state.
		@param defaultDisabledImageURL disabled image url
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="defaultDisabledLeafImageURL">
		<doc><![CDATA[
		An url string pointing to the default image for a disabled leaf.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="defaultExpandedImageURL">
		<doc><![CDATA[
		An url string pointing to the default image for an expanded node.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an url string pointing to the default image for an expanded node.
		@return expanded image url
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an url string pointing to the default image for an expanded node.
		@param defaultExpandedImageURL expanded image url
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="defaultExpandedLeafImageURL">
		<doc><![CDATA[
		An url string pointing to the default image for an expanded leaf.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="defaultImageURL">
		<doc><![CDATA[
		An url string pointing to the default image.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an url string pointing to the default image.
		@return image url
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an url string pointing to the default image.
		@param defaultImageURL image url
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="defaultLeafImageURL">
		<doc><![CDATA[
		An url string pointing to the default image for a leaf.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an url string pointing to the default image for a leaf.
		@return leaf image url
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an url string pointing to the default image for a leaf.
		@param defaultLeafImageURL leaf image url
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="defaultNumber">
		<doc><![CDATA[
		the default value.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns the default value.
		@return default value
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets the default value.
		@param defaultNumber default value
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>number</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="defaultSelectedImageURL">
		<doc><![CDATA[
		An url string pointing to the default image for the selected state.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an url string pointing to the default image for the selected state.
		@return selected image url
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an url string pointing to the default image for the selected state.
		@param defaultSelectedImageURL selected image url
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="defaultSelectedLeafImageURL">
		<doc><![CDATA[
		An url string pointing to the default image for the selected leaf.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="defaultTime">
		<doc><![CDATA[
		The default value.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns the default value.
		@return default value
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets the default value.
		@param defaultTime default value
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>time</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="disableCache">
		<doc><![CDATA[
		A boolean value that force disabled cache for the page or not.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value that force disabled cache for the page or not.
		@return true if the cache is disabled
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value that force disabled cache for the page or not.
		@param disableCache true if the cache is to be disabled
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="disableContextMenu">
		<doc><![CDATA[
		A boolean value that hide context menu for the page or not.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value that hide context menu for the page or not.
		@return true if the browser context menu is hidden
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value that hide context menu for the page or not.
		@param disableContextMenu true if the browser context menu is to be hidden
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="disabled">
		<doc><![CDATA[
		A boolean value that represents the disabled state of the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="disabledCookiesPageURL">
		<doc><![CDATA[
		A boolean value that inhibits cookies for the page or not.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value that inhibits cookies for the page or not.
		@return true if cookies are disabled
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value that inhibits cookies for the page or not.
		@param disabledCookiesPageURL true if cookies are to be disabled
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="disabledIEImageBar">
		<doc><![CDATA[
		A boolean value specifying wether the "image Bar" (contextual menu for images) in Internet Explorer should be hidden.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value specifying wether the "image Bar" (contextual menu for images) in Internet Explorer should be hidden.
		@return true if the image bar is disabled
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value specifying wether the "image Bar" (contextual menu for images) in Internet Explorer should be hidden.
		@param disabledIEImageBar true if the image bar is to be disabled
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="disabledImageURL">
		<doc><![CDATA[
		An url string pointing to the image used for the disabled state.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="disabledScriptPageURL">
		<doc><![CDATA[
		An url string pointing to a page shown if scripts are not enabled on the browser.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an url string pointing to a page shown if scripts are not enabled on the browser.
		@return url
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an url string pointing to a page shown if scripts are not enabled on the browser.
		@param disabledScriptPageURL url
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="disabledWeekDays">
		<doc><![CDATA[
		A list of disabled week days (depending on the locale specified for the component).
]]></doc>
		<tooltip><![CDATA[
		depends on the locale specified for the component.
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a list of disabled week days (depending on the locale specified for the component).
		@return list of days
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a list of disabled week days (depending on the locale specified for the component).
		@param disabledWeekDays list of days
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="doubleClickListener">
		<doc><![CDATA[
		Executed when the component is double-clicked.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="emptyMessage">
		<doc><![CDATA[
		A string containing the message shown when there is no result.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="enableViewState">
		<doc><![CDATA[
		TODO
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type></type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="errorImageURL">
		<doc><![CDATA[
		An url string pointing to an image used for error messages.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="errorStyleClass">
		<doc><![CDATA[
		A space-separated list of CSS style class(es) to be applied for Error Messages. This value will be passed through as the "class" attribute on generated markup.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>styleCLass</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="expandedImageURL">
		<doc><![CDATA[
		An url string pointing to an image used for the expanded state.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="expansionUseValue">
		<doc><![CDATA[
		A boolean value that indicates wether a node is identified by it's value or by a complete path.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value that indicates wether a node is identified by it's value or by a complete path.
		@return true if node identification use node value
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value that indicates wether a node is identified by it's value or by a complete path.
		@param expansionUseValue true if node identification should use node value
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="expansionValues">
		<doc><![CDATA[
		A table of the values associated with expanded nodes for the component. (Binding only)
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>table</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="fatalImageURL">
		<doc><![CDATA[
		An url string pointing to the image for a fatal message.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="fatalStyleClass">
		<doc><![CDATA[
		A space-separated list of CSS style class(es) to be applied for fatal messages. This value will be passed through as the "class" attribute on generated markup.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>styleCLass</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="favoriteImageURL">
		<doc><![CDATA[
		An url string pointing to the image used for a bookmark.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an url string pointing to the image used for a bookmark.
		@return favorite image url
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an url string pointing to the image used for a bookmark.
		@param favoriteImageURL favorite image url
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="filterProperties">
		<doc><![CDATA[
		A binded object that hold the filters to use on the server side. This property is often set via javascript code.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>object</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="first">
		<doc><![CDATA[
		A number identifying the row to be displayed at the top of the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="focusId">
		<doc><![CDATA[
		A component's id. This component will get the focus.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a component's id. This component will get the focus.
		@return id
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a component's id. This component will get the focus.
		@param focusId id
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>id</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="focusListener">
		<doc><![CDATA[
		Executed when the component gets the focus.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="focusStyleClass">
		<doc><![CDATA[
		A space-separated list of CSS style classes to be applied when this component get the focus. This value will be passed through as the "class" attribute on generated markup.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>styleCLass</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="fontBold">
		<doc><![CDATA[
		A boolean value indicating the <i>bold</i> property for the specified font.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="fontItalic">
		<doc><![CDATA[
		A boolean value indicating the <i>italic</i> property for the specified font.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="fontName">
		<doc><![CDATA[
		A string value indicating the name of the font used for this component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="fontSize">
		<doc><![CDATA[
		A string indicating the size to use for the selected font. (or any other CSS accepted value for font size).
		<br/>
		values [xx-small|x-small|small|medium|large|x-large|xx-large|smaller|larger|<i>length</i> for example 10px|<i>%</i>]
]]></doc>
		<tooltip><![CDATA[
		xx-small|x-small|small|medium|large|x-large|xx-large|smaller|larger|<i>length</i> for example 10px|<i>%</i>
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="fontUnderline">
		<doc><![CDATA[
		A boolean value indicating the <i>underline</i> property for the specified font.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="for">
		<doc><![CDATA[
		A component's id that express the link between the two components.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>id</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="forItemValue">
		<doc><![CDATA[
		A string specifying a value to select in the component identified in the <b>for</b> property.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string specifying a value to select in the component identified in the <b>for</b> property.
		@return value to selected
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string specifying a value to select in the component identified in the <b>for</b> property.
		@param forItemValue value to select
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="forValueFormat">
		<doc><![CDATA[
		A string specifying the format to use for the value that will be send to the component specified in the <b>for</b> property.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string specifying the format to use for the value that will be send to the component specified in the <b>for</b> property.
		@return value format
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string specifying the format to use for the value that will be send to the component specified in the <b>for</b> property.
		@param forValueFormat value format
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="forceProposal">
		<doc><![CDATA[
		A boolean value indicating if the first proposed value must be automatically appended to the current entry.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value indicating if the first proposed value must be automatically appended to the current entry.
		@return true if proposal is forced
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value indicating if the first proposed value must be automatically appended to the current entry.
		@param forceProposal if proposal has to be forced
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="foregroundColor">
		<doc><![CDATA[
		A color value (as specified by CSS) for the text.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>color</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="fractionDigits">
		<doc><![CDATA[
		An int value indicating the number of digits to show after the decimal separator.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an int value indicating the number of digits to show after the decimal separator.
		@return number of fraction digits
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an int value indicating the number of digits to show after the decimal separator.
		@param fractionDigits number of fraction digits
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="fractionStep">
		<doc><![CDATA[
		Experimental Do not use.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Experimental Do not use.
		]]></getter-doc>
		<setter-doc><![CDATA[
		Experimental Do not use.
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="globalOnly">
		<doc><![CDATA[
		A boolean value indicating if the component specific messages should be shown or not.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="groupName">
		<doc><![CDATA[
		A string specifying the name of the virtual entity that links different components together.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="headerVisible">
		<doc><![CDATA[
		A boolean value indicating wether the header should be visible.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value indicating wether the header should be visible.
		@return true if the header is visible
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value indicating wether the header should be visible.
		@param headerVisible true if the header should be visible
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="height">
		<doc><![CDATA[
		A string value (as specified by CSS) for the height of the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="helpMessage">
		<doc><![CDATA[
		A string value specifying the message to be shown by a <a href="/comps/helpMessageZoneComponent.html">helpMessageZone Component</a>.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="helpURL">
		<doc><![CDATA[
		An URL that points to a help page for the component. it is used for example by a <a href="/comps/helpButtonComponent.html">helpButton Component</a>.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="hiddenMode">
		<doc><![CDATA[
		A string value specifying the management of invisible state on the client.
		Authorized values are :
		<ul><li>
		server : if not visible, nothing is sent to the client
		</li><li>
		phantom : if not visible, the data is sent to the client and the page estate is reserved for a futur eventual display of the component
		</li><li>
		ignore : if not visible, the data is sent to the client but no page estate is reserved
		</li></ul>
]]></doc>
		<tooltip><![CDATA[
		server|ignore|phantom
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="hideIfDisabled">
		<doc><![CDATA[
		A boolean value indicating wether the component should be hide when it is not available.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="hideRootExpandSign">
		<doc><![CDATA[
		A boolean value indicating wether the expand sign should be visible for the topmost node.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value indicating wether the expand sign should be visible for the topmost node.
		@return true if the head node's expand sign is hidden
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value indicating wether the expand sign should be visible for the topmost node.
		@param hideRootExpandSign true if the head node's expand sign is to be hidden
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="homeDate">
		<doc><![CDATA[
		A string indicating the date selected when the "home" button is pressed.
		Authorized values are :
		<ul><li>
		today : the current day with time = 00:00
		</li><li>
		now : the current day with the current time for the locale specified for the component
		</li><li>
		yesterday : the previous day with time = 00:00
		</li><li>
		tomorrow : the following day with time = 00:00
		</li><li>
		a date : depending on the locale specified for the component
		</li></ul>
]]></doc>
		<tooltip><![CDATA[
		today|now|yesterday|tomorrow|date
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="homeDateLabel">
		<doc><![CDATA[
		A string specifying the label associated with the home button.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string specifying the label associated with the home button.
		@return the label used
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string specifying the label associated with the home button.
		@param homeDateLabel the label to use
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="horizontalScroll">
		<doc><![CDATA[
		A boolean value indicating wether the horizontal scroll is shown.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value indicating wether the horizontal scroll is shown.
		@return true if the horizontal scrollbar is shown
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value indicating wether the horizontal scroll is shown.
		@param horizontalScroll true if the horizontal scrollbar is to be shown
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="horizontalScrollPosition">
		<doc><![CDATA[
		A string value specifying the position of the horizontal scroolbar.
]]></doc>
		<tooltip><![CDATA[
		browser dependant
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="hourStep">
		<doc><![CDATA[
		An int value specifying the step used for the hour field when increasing/decreasing the value with the up/down arrows.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an int value specifying the step used for the hour field when increasing/decreasing the value with the up/down arrows.
		@return step used
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an int value specifying the step used for the hour field when increasing/decreasing the value with the up/down arrows.
		@param hourStep stop to use
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="hoverImageURL">
		<doc><![CDATA[
		An url string pointing to the image used chen the pointer hover the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="id">
		<doc><![CDATA[
		A string specifying the identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>id</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="imageHeight">
		<doc><![CDATA[
		An int value specifying the height (in pixels) to use for the image shown.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="imageURL">
		<doc><![CDATA[
		An url string pointing to the image used by the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="imageWidth">
		<doc><![CDATA[
		An int value specifying the width (in pixels) to use for the image shown.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="immediate">
		<doc><![CDATA[
		A boolean value indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="indeterminate">
		<doc><![CDATA[
		A boolean value indicating wether the value is not determinated.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value indicating wether the value is not determinated.
		@return true if not determinated
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value indicating wether the value is not determinated.
		@param indeterminate true if not determinated
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="infoImageURL">
		<doc><![CDATA[
		An url string pointing to the image used for an info message.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="infoStyleClass">
		<doc><![CDATA[
		A space-separated list of CSS style class(es) to be applied for info messages. This value will be passed through as the "class" attribute on generated markup.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>styleCLass</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="initListener">
		<doc><![CDATA[
		Executed when the component is intialized.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="inputType">
		<doc><![CDATA[
Experimental:		A string value specifying the type of input to show radio button or check box.
]]></doc>
		<tooltip><![CDATA[
		radio|check
]]></tooltip>
		<getter-doc><![CDATA[
		Experimental:	Returns a string value specifying the type of input to show radio button or check box. 
		@return radio|check
		]]></getter-doc>
		<setter-doc><![CDATA[
		Experimental:	Sets a string value specifying the type of input to show radio button or check box. 
		@param inputType radio|check
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="integerDigits">
		<doc><![CDATA[
		An int value indicating the number of digits to show before the decimal separator.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an int value indicating the number of digits to show before the decimal separator.
		@return number of integer digits
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an int value indicating the number of digits to show before the decimal separator.
		@param integerDigits number of integer digits
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="integerStep">
		<doc><![CDATA[
		An int value specifying the step used for the integer field when increasing/decreasing the value with the up/down arrows.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an int value specifying the step used for the integer field when increasing/decreasing the value with the up/down arrows.
		@return step
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an int value specifying the step used for the integer field when increasing/decreasing the value with the up/down arrows.
		@param integerStep step
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="invalidBrowserPageURL">
		<doc><![CDATA[
		An url pointing to the page to show if the browser is not supported.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an url pointing to the page to show if the browser is not supported.
		@return url
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an url pointing to the page to show if the browser is not supported.
		@param invalidBrowserPageURL url
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="itemDescription">
		<doc><![CDATA[
		A string value describing the item.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="itemDisabled">
		<doc><![CDATA[
		A boolean value indicating whether the option created
        by this component is disabled.  Expressions
        must evaluate to a boolean.  Default value
        is false.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="itemLabel">
		<doc><![CDATA[
		A string value specifying the label to be displayed to the user
        for this option.
 ]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="itemValue">
		<doc><![CDATA[
		A string value to be returned to the server if this
        option is selected by the user.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="keyBinding">
		<doc><![CDATA[
		A string value specifying the key associated to the component. for example "Alt+F1"
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value specifying the key associated to the component. for example "Alt+F1"
		@return key
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value specifying the key associated to the component. for example "Alt+F1"
		@param keyBinding key
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="keyDownListener">
		<doc><![CDATA[
		Executed when the component detects a key down event.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="keyPressListener">
		<doc><![CDATA[
		Executed when the component detects a key pressed event.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="keyUpListener">
		<doc><![CDATA[
		Executed when the component detects a key up event.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="loadListener">
		<doc><![CDATA[
		Executed when the component is fully loaded (similar to init for AJAX).
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="lookId">
		<doc><![CDATA[
		A string value specifying the choosen look of the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="manyResultsMessage">
		<doc><![CDATA[
		A string value to be displayed by the component. It can embbed keywords (between braces : "{keyword}") :
		<ul><li>
		first: the index of the first row shown
		</li><li>
		position: the index of the first row shown
		</li><li>
		pageposition : the index of the page shown
		</li><li>
		last: a link to the last page
		</li><li>
		rowcount : the total number of rows
		</li><li>
		bfirst: a link to the first page
		</li><li>
		bnext: a link to the next page
		</li><li>
		blast: a link to the last page
		</li><li>
		bpages[:n] : a list of links to pages before and after the page shown (n specifies the number of indexes shown)
		</li><li>
		bprev: a link to the previous page
		</li></ul>
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value to be displayed by the component. It can embbed keywords (between braces : "{keyword}") :
		<ul><li>
		first: the index of the first row shown
		</li><li>
		position: the index of the first row shown
		</li><li>
		pageposition : the index of the page shown
		</li><li>
		last: a link to the last page
		</li><li>
		rowcount : the total number of rows
		</li><li>
		bfirst: a link to the first page
		</li><li>
		bnext: a link to the next page
		</li><li>
		blast: a link to the last page
		</li><li>
		bpages[:n] : a list of links to pages before and after the page shown (n specifies the number of indexes shown)
		</li><li>
		bprev: a link to the previous page
		</li></ul>
		@return message
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value to be displayed by the component. It can embbed keywords (between braces : "{keyword}") :
		<ul><li>
		first: the index of the first row shown
		</li><li>
		position: the index of the first row shown
		</li><li>
		pageposition : the index of the page shown
		</li><li>
		last: a link to the last page
		</li><li>
		rowcount : the total number of rows
		</li><li>
		bfirst: a link to the first page
		</li><li>
		bnext: a link to the next page
		</li><li>
		blast: a link to the last page
		</li><li>
		bpages[:n] : a list of links to pages before and after the page shown (n specifies the number of indexes shown)
		</li><li>
		bprev: a link to the previous page
		</li></ul>
		@param manyResultsMessage message
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="marginBottom">
		<doc><![CDATA[
		A string value specifying the margin size for the component's bottom (compliant to CSS margin-bottom).
]]></doc>
		<tooltip><![CDATA[
		css: margin-bottom
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="marginLeft">
		<doc><![CDATA[
		A string value specifying the margin size for the component's left (compliant to CSS margin-left).
]]></doc>
		<tooltip><![CDATA[
		css: margin-left
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="marginRight">
		<doc><![CDATA[
		A string value specifying the margin size for the component's right (compliant to CSS margin-right).
]]></doc>
		<tooltip><![CDATA[
		css: margin-right
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="marginTop">
		<doc><![CDATA[
		A string value specifying the margin size for the component's top (compliant to CSS margin-top).
]]></doc>
		<tooltip><![CDATA[
		css: margin-top
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="margins">
		<doc><![CDATA[
		A string value specifying the margins for the component (compliant to CSS margin).
]]></doc>
		<tooltip><![CDATA[
		css: margin
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value specifying the margins for the component (compliant to CSS margin).
		@return margins
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value specifying the margins for the component (compliant to CSS margin).
		@param margins margins
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="maxDate">
		<doc><![CDATA[
		A date value indicating the maximum acceptable date for the component. The last accepted value is maxDate minus one day.
]]></doc>
		<tooltip><![CDATA[
		
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a date value indicating the maximum acceptable date for the component. The last accepted value is maxDate minus one day.
		@return max date
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a date value indicating the maximum acceptable date for the component. The last accepted value is maxDate minus one day.
		@param maxDate max date
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>date</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="maxResultNumber">
		<doc><![CDATA[
		An int value specifying the maximum number of rows for the result.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="maxTextLength">
		<doc><![CDATA[
		An int value specifying the maximum number of characters that the user can enter in the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an int value specifying the maximum number of characters that the user can enter in the component.
		@return maximum number of characters
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an int value specifying the maximum number of characters that the user can enter in the component.
		@param maxTextLength maximum number of characters
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="maxTime">
		<doc><![CDATA[
		A time value indicating the maximum acceptable time for the component. The last accepted value is lesser than maxTime.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a time value indicating the maximum acceptable time for the component. The last accepted value is lesser than maxTime.
		@return max time
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a time value indicating the maximum acceptable time for the component. The last accepted value is lesser than maxTime.
		@param maxTime max time
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>time</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="maxWidth">
		<doc><![CDATA[
		An int value specifying the maximum width in pixels (if resizeable).
]]></doc>
		<tooltip><![CDATA[
		size in pixels
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an int value specifying the maximum width in pixels (if resizeable).
		@return max width
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an int value specifying the maximum width in pixels (if resizeable).
		@param maxWidth max width
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="maximum">
		<doc><![CDATA[
		An int value specifying the upper limit for the value of the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an int value specifying the upper limit for the value of the component.
		@return maximum
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an int value specifying the upper limit for the value of the component.
		@param maximum maximum
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="menuId">
		<doc><![CDATA[
		An id used to retreive a specific menu. For example, "#node" is used to call a menu on a tree node while "#body" is used for the menu boody.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an id used to retreive a specific menu. For example, "#node" is used to call a menu on a tree node while "#body" is used for the menu boody.
		@return menu Id
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an id used to retreive a specific menu. For example, "#node" is used to call a menu on a tree node while "#body" is used for the menu boody.
		@param menuId menu Id
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>id</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="menuListener">
		<doc><![CDATA[
		Executed when a menu is activated.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="message">
		<doc><![CDATA[
		A string value to be displayed by the component. It can embbed keywords (between braces : "{keyword}") :
		<ul><li>
		first: the index of the first row shown
		</li><li>
		position: the index of the first row shown
		</li><li>
		pageposition : the index of the page shown
		</li><li>
		last: a link to the last page
		</li><li>
		rowcount : the total number of rows
		</li><li>
		bfirst: a link to the first page
		</li><li>
		bnext: a link to the next page
		</li><li>
		blast: a link to the last page
		</li><li>
		bpages[:n] : a list of links to pages before and after the page shown (n specifies the number of indexes shown)
		</li><li>
		bprev: a link to the previous page
		</li></ul>
		ex: "{rowcount}' results, results from '{first}' to '{last}'.\n['{bfirst}'/'{bprev}'] '{bpages}' ['{bnext}'/'{blast}']'"
]]></doc>
		<tooltip><![CDATA[
		ex: "{rowcount}' results, results from '{first}' to '{last}'.\n['{bfirst}'/'{bprev}'] '{bpages}' ['{bnext}'/'{blast}']'"
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value to be displayed by the component. It can embbed keywords (between braces : "{keyword}") :
		<ul><li>
		first: the index of the first row shown
		</li><li>
		position: the index of the first row shown
		</li><li>
		pageposition : the index of the page shown
		</li><li>
		last: a link to the last page
		</li><li>
		rowcount : the total number of rows
		</li><li>
		bfirst: a link to the first page
		</li><li>
		bnext: a link to the next page
		</li><li>
		blast: a link to the last page
		</li><li>
		bpages[:n] : a list of links to pages before and after the page shown (n specifies the number of indexes shown)
		</li><li>
		bprev: a link to the previous page
		</li></ul>
		ex: "{rowcount}' results, results from '{first}' to '{last}'.\n['{bfirst}'/'{bprev}'] '{bpages}' ['{bnext}'/'{blast}']'"
		@return message
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value to be displayed by the component. It can embbed keywords (between braces : "{keyword}") :
		<ul><li>
		first: the index of the first row shown
		</li><li>
		position: the index of the first row shown
		</li><li>
		pageposition : the index of the page shown
		</li><li>
		last: a link to the last page
		</li><li>
		rowcount : the total number of rows
		</li><li>
		bfirst: a link to the first page
		</li><li>
		bnext: a link to the next page
		</li><li>
		blast: a link to the last page
		</li><li>
		bpages[:n] : a list of links to pages before and after the page shown (n specifies the number of indexes shown)
		</li><li>
		bprev: a link to the previous page
		</li></ul>
		ex: "{rowcount}' results, results from '{first}' to '{last}'.\n['{bfirst}'/'{bprev}'] '{bpages}' ['{bnext}'/'{blast}']'"
		@param message message
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="millisStep">
		<doc><![CDATA[
		An int value specifying the step used for the millisecond field when increasing/decreasing the value with the up/down arrows.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an int value specifying the step used for the millisecond field when increasing/decreasing the value with the up/down arrows.
		@return step
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an int value specifying the step used for the millisecond field when increasing/decreasing the value with the up/down arrows.
		@param millisStep step
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="minDate">
		<doc><![CDATA[
		A date value indicating the minimum acceptable date for the component. the first accepted value is minDate plus one day.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a date value indicating the minimum acceptable date for the component. the first accepted value is minDate plus one day.
		@return min date
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a date value indicating the minimum acceptable date for the component. the first accepted value is minDate plus one day.
		@param minDate min date
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>date</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="minTime">
		<doc><![CDATA[
		A time value indicating the minimum acceptable time for the component. The first accepted value is greater than minTime.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a time value indicating the minimum acceptable time for the component. The first accepted value is greater than minTime.
		@return min Time
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a time value indicating the minimum acceptable time for the component. The first accepted value is greater than minTime.
		@param minTime min Time
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>time</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="minWidth">
		<doc><![CDATA[
		An int value specifying the minimum width in pixels (if resizeable).
]]></doc>
		<tooltip><![CDATA[
		size in pixel
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an int value specifying the minimum width in pixels (if resizeable).
		@return min width
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an int value specifying the minimum width in pixels (if resizeable).
		@param minWidth min width
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="minimum">
		<doc><![CDATA[
		An int value specifying the lower limit for the value of the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="minuteStep">
		<doc><![CDATA[
		An int value specifying the step used for the minute field when increasing/decreasing the value with the up/down arrows.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an int value specifying the step used for the minute field when increasing/decreasing the value with the up/down arrows.
		@return step
		]]></getter-doc>
		<setter-doc><![CDATA[
		Steps an int value specifying the step used for the minute field when increasing/decreasing the value with the up/down arrows.
		@param minuteStep step
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="mode">
		<doc><![CDATA[
		A string specifying the selection mode :
		<ul><li>
		date: one day per selection
		</li><li>
		period: a continuous period of time
		</li><li>
		periods: several non-continuous period of time (for example every wednesday)
		</li></ul>
]]></doc>
		<tooltip><![CDATA[
		date|period|periods
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="mouseOutListener">
		<doc><![CDATA[
		Executed when the pointer leaves the area of the component.
		A string that represent a javascript expression to evaluate.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="mouseOverListener">
		<doc><![CDATA[
		Executed when the pointer hover the component's area.
		A string that represent a javascript expression to evaluate.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="multipleSelect">
		<doc><![CDATA[
		A boolean value indicating wether multiple selection is permitted.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="name">
		<doc><![CDATA[
		A string value specifying the name of the parameter.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="noPagedMessage">
		<doc><![CDATA[
		A string specifying the message to display when there is no row to display.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string specifying the message to display when there is no row to display.
		@return message
		]]></getter-doc>
		<setter-doc><![CDATA[
		Steps a string specifying the message to display when there is no row to display.
		@param noPagedMessage message
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="number">
		<doc><![CDATA[
		A number typed value.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a number typed value.
		@return number typed value
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a number typed value.
		@param number number typed value
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>number</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="numberFormat">
		<doc><![CDATA[
		A string value specifying the format to use (compliant with java format).
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value specifying the format to use (compliant with java format).
		@return number format
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value specifying the format to use (compliant with java format).
		@param numberFormat number format
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="numberFormatType">
		<doc><![CDATA[
		A string value specifying the data type :
		<ul><li>
		number
		</li><li>
		integer
		</li><li>
		currency
		</li><li>
		percent
		</li></ul>
]]></doc>
		<tooltip><![CDATA[
		number|currency|percent|integer
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="oneResultMessage">
		<doc><![CDATA[
		A string value to be displayed by the component when there's only one result. It can embbed keywords (between braces : "{keyword}") :
		<ul><li>
		first: the index of the first row shown
		</li><li>
		position: the index of the first row shown
		</li><li>
		pageposition : the index of the page shown
		</li><li>
		last: a link to the last page
		</li><li>
		rowcount : the total number of rows
		</li><li>
		bfirst: a link to the first page
		</li><li>
		bnext: a link to the next page
		</li><li>
		blast: a link to the last page
		</li><li>
		bpages[:n] : a list of links to pages before and after the page shown (n specifies the number of indexes shown)
		</li><li>
		bprev: a link to the previous page
		</li></ul>
		ex: "One result.\nCome back later !"
		ex: "{rowcount}' results, results from '{first}' to '{last}'.\n['{bfirst}'/'{bprev}'] '{bpages}' ['{bnext}'/'{blast}']'"
]]></doc>
		<tooltip><![CDATA[
		ex: "One result.\nCome back later !"
		ex: "{rowcount}' results, results from '{first}' to '{last}'.\n['{bfirst}'/'{bprev}'] '{bpages}' ['{bnext}'/'{blast}']'"
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value to be displayed by the component when there's only one result. It can embbed keywords (between braces : "{keyword}") :
		<ul><li>
		first: the index of the first row shown
		</li><li>
		position: the index of the first row shown
		</li><li>
		pageposition : the index of the page shown
		</li><li>
		last: a link to the last page
		</li><li>
		rowcount : the total number of rows
		</li><li>
		bfirst: a link to the first page
		</li><li>
		bnext: a link to the next page
		</li><li>
		blast: a link to the last page
		</li><li>
		bpages[:n] : a list of links to pages before and after the page shown (n specifies the number of indexes shown)
		</li><li>
		bprev: a link to the previous page
		</li></ul>
		ex: "One result.\nCome back later !"
		ex: "{rowcount}' results, results from '{first}' to '{last}'.\n['{bfirst}'/'{bprev}'] '{bpages}' ['{bnext}'/'{blast}']'"
		@return message
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value to be displayed by the component when there's only one result. It can embbed keywords (between braces : "{keyword}") :
		<ul><li>
		first: the index of the first row shown
		</li><li>
		position: the index of the first row shown
		</li><li>
		pageposition : the index of the page shown
		</li><li>
		last: a link to the last page
		</li><li>
		rowcount : the total number of rows
		</li><li>
		bfirst: a link to the first page
		</li><li>
		bnext: a link to the next page
		</li><li>
		blast: a link to the last page
		</li><li>
		bpages[:n] : a list of links to pages before and after the page shown (n specifies the number of indexes shown)
		</li><li>
		bprev: a link to the previous page
		</li></ul>
		ex: "One result.\nCome back later !"
		ex: "{rowcount}' results, results from '{first}' to '{last}'.\n['{bfirst}'/'{bprev}'] '{bpages}' ['{bnext}'/'{blast}']'"
		@param oneResultMessage message
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="orientation">
		<doc><![CDATA[
		A string value specifying the orientation of the component :
		<ul><li>
		horizontal (default value)
		</li><li>
		vertical
		</li></ul>
]]></doc>
		<tooltip><![CDATA[
		vertical|horizontal default:horizontal
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="paged">
		<doc><![CDATA[
		A boolean value specifying wether the results should be displayed by page (thus letting the user choose what page to display via the pager).
		It is ignored if the attribute "rows" is undefined.
		The default value is true. 
		If "rows" is defined and "paged"'s value is set to false, pages are downloaded automatically when the last displayed row is selected.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value specifying wether the results should be displayed by page (thus letting the user choose what page to display via the pager).
		It is ignored if the attribute "rows" is undefined.
		The default value is true. 
		If "rows" is defined and "paged"'s value is set to false, pages are downloaded automatically when the last displayed row is selected.
		@return true if display by page
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value specifying wether the results should be displayed by page (thus letting the user choose what page to display via the pager).
		It is ignored if the attribute "rows" is undefined.
		The default value is true. 
		If "rows" is defined and "paged"'s value is set to false, pages are downloaded automatically when the last displayed row is selected.
		@param paged true if display by page
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="popupRowNumber">
		<doc><![CDATA[
		Experimental : do not use!
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Experimental : do not use!
		]]></getter-doc>
		<setter-doc><![CDATA[
		Experimental : do not use!
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="preference">
		<doc><![CDATA[
		A binded object that holds the preferences for the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>object</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="preloadedLevelDepth">
		<doc><![CDATA[
		An int value specifying the number of levels that should be preloaded when a node is displayed.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an int value specifying the number of levels that should be preloaded when a node is displayed.
		@return number of preloaded levels
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an int value specifying the number of levels that should be preloaded when a node is displayed.
		@param preloadedLevelDepth number of levels to preload
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="propertyChangeListener">
		<doc><![CDATA[
		Executed when a component's property is changed (by javascript).
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="radioValue">
		<doc><![CDATA[
		A string value specifying the value associated with the group when this component is selected.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="readOnly">
		<doc><![CDATA[
         A boolean value indicating that this component will prohibit
          changes by the user.  The element may receive focus
          unless it has also been disabled.
 ]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="removeAllWhenShown">
		<doc><![CDATA[
		A boolean value specifying wether the content of the component must be remove before the listener is called and the component displayed.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value specifying wether the content of the component must be remove before the listener is called and the component displayed.
		@return true if content is removed when shown
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value specifying wether the content of the component must be remove before the listener is called and the component displayed.
		@param removeAllWhenShown true if content is to be removed when shown
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="renderBaseTag">
		<doc><![CDATA[
		A boolean value specifying if the HTML BASE tag must be generated.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value specifying the HTML base.
		@return HTML base
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value specifying the HTML base.
		@param renderBaseTag HTML base
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="rendered">
		<doc><![CDATA[
		A boolean value indicating whether or not this component should be rendered
          (during Render Response Phase), or processed on any subsequent
          form submit.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="required">
		<doc><![CDATA[
		A boolean value indicating that the user is required to provide a submitted
          value for this input component.
 ]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="requiredClasses">
		<doc><![CDATA[
		A string value specifying a list of javascript classes to include.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value specifying a list of javascript classes to include.
		@return list of javascript classes
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value specifying a list of javascript classes to include.
		@param requiredClasses list of javascript classes
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="requiredFiles">
		<doc><![CDATA[
		A string value specifying a list of javascript files to include.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value specifying a list of javascript files to include.
		@return list of javascript files
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value specifying a list of javascript files to include.
		@param requiredFiles list of javascript files
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="resetListener">
		<doc><![CDATA[
		Executed when the reset button is activated on a form.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="resizable">
		<doc><![CDATA[
		A boolean value indicating wether the component can be resized by the user.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="rowCountVar">
		<doc><![CDATA[
		A string value specifying the name of the variable receiving the number of rows.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value specifying the name of the variable receiving the number of rows.
		@return variable name
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value specifying the name of the variable receiving the number of rows.
		@param rowCountVar variable name
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="rowIndexVar">
		<doc><![CDATA[
		A string value specifying the name of the variable receiving the index of the current row.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value specifying the name of the variable receiving the index of the current row.
		@return variable name
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value specifying the name of the variable receiving the index of the current row.
		@param rowIndexVar variable name
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="rowNumber">
		<doc><![CDATA[
		An int value specifying the number of rows to be displayed.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an int value specifying the number of rows to be displayed.
		@return number of rows
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an int value specifying the number of rows to be displayed.
		@param rowNumber number of rows
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="rowStyleClass">
		<doc><![CDATA[
		A space-separated list of CSS style class(es) to be applied when the row is rendered. This value will be passed through as the "class" attribute on generated markup.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a space-separated list of CSS style class(es) to be applied when the row is rendered. This value will be passed through as the "class" attribute on generated markup.
		@return list of CSS style classes
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a space-separated list of CSS style class(es) to be applied when the row is rendered. This value will be passed through as the "class" attribute on generated markup.
		@param rowStyleClass list of CSS style classes
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>styleCLass</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="rowValueColumnId">
		<doc><![CDATA[
		An id for the column containing the key for the row.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns the id for the column containing the key for the row.
		@return column id
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets the id for the column containing the key for the row.
		@param rowValueColumnId column id
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>id</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="rows">
		<doc><![CDATA[
		An int value specifying the number of rows to display, starting with the one identified by the
          "first" property.  If this value is set to zero, all available rows in
          the underlying data model will be displayed.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>


	<attributeDoc id="scopeValue">
		<doc><![CDATA[
		A string value specifying the binding associated to a variable representing a shortcut. (cf. scopeVar)
		ex: if scopeVar "bat" is associated to scopeValue "bean.attribute1.attribute2" then the use of "bat.attribute3" will be equivalente to "bean.attribute1.attribute2.attribute3"
]]></doc>
		<tooltip><![CDATA[
		cf. scopeVar
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="scopeVar">
		<doc><![CDATA[
		A string value specifying the name of a variable representing a shortcut to a binding. (cf. scopeValue)
		ex: if scopeVar "bat" is associated to scopeValue "bean.attribute1.attribute2" then the use of "bat.attribute3" will be equivalente to "bean.attribute1.attribute2.attribute3"
]]></doc>
		<tooltip><![CDATA[
		cf. scopeValue
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>
	
	<attributeDoc id="secondStep">
		<doc><![CDATA[
		An int value specifying the step used for the second field when increasing/decreasing the value with the up/down arrows.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an int value specifying the step used for the second field when increasing/decreasing the value with the up/down arrows.
		@return step
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an int value specifying the step used for the second field when increasing/decreasing the value with the up/down arrows.
		@param secondStep step
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="selectable">
		<doc><![CDATA[
		A boolean value indicating wether the component can receive a user's selection
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="selected">
		<doc><![CDATA[
		A boolean value indicating wether the component is selected.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="selectedImageURL">
		<doc><![CDATA[
		An url string pointing to the image used when the component is selected.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="selectedState">
		<doc><![CDATA[
		A boolean value indicating wether the selected component is undefined.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="selectedValues">
		<doc><![CDATA[
		A table of the values associated with selected nodes for the component. (Binding only)
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a table of the values associated with selected nodes for the component. (Binding only)
		@return table of values
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a table of the values associated with selected nodes for the component. (Binding only)
		@param selectedValues table of values
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>table</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="selectionCardinality">
		<doc><![CDATA[
		A string value specifying the type of multiple selection authorized:
		<ul><li>
		zeromany|*: any number of selections or none
		</li><li>
		one|1: one and only one selection
		</li><li>
		onemany|+: one or more selection
		</li><li>
		optionnal|?: none or one selection
		</li></ul>
]]></doc>
		<tooltip><![CDATA[
		zeromany|one|onemany|optionnal|*|1|+|?
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="selectionListener">
		<doc><![CDATA[
		Executed when the component is selected.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="selectionValues">
		<doc><![CDATA[
		A table of the values associated with selected nodes for the component. (Binding only)
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>table</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="serverSide">
		<doc><![CDATA[
		A boolean value indicating wether the resource is available on the server side.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value indicating wether the resource is available on the server side.
		@return true if the resource is available on the server side
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value indicating wether the resource is available on the server side.
		@param serverSide true if the resource is available on the server side
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="serviceEventListener">
		<doc><![CDATA[
		Executed when the component is called (javascript).
		A string that represent a server action to execute.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "#{javaBean.methodA}"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="serviceId">
		<doc><![CDATA[
		An id for the service.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns the service id.
		@return service id
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets the service id.
		@param serviceId service id
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>id</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="setFocusIfMessage">
		<doc><![CDATA[
		A boolean value indicating wether the component should be get the focus when a message is fired.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="showCalendarOnFocus">
		<doc><![CDATA[
		A boolean value indicating wether the associated <a href="/comps/dateCHooserComponent.html">dateChooser Component</a> should be automatically opened when the component gets the focus.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value indicating wether the associated <a href="/comps/dateCHooserComponent.html">dateChooser Component</a> should be automatically opened when the component gets the focus.
		@return true if calendar is to be shown
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value indicating wether the associated <a href="/comps/dateCHooserComponent.html">dateChooser Component</a> should be automatically opened when the component gets the focus.
		@param showCalendarOnFocus true if calendar is shown
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="showDetail">
		<doc><![CDATA[
		A boolean value indicating whether the summary portion of displayed messages
          should be included.  Default value is "true".
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="showIfMessage">
		<doc><![CDATA[
		A boolean value indicating wether the component should be shown when a message is fired.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="showSummary">
		<doc><![CDATA[
		A boolean value indicating whether the summary portion of displayed messages
          should be included.  Default value is "false".
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="sortComparator">
		<doc><![CDATA[
		A string value specifying the "compare" function to use. it can reference a javascript function or a keyword :
		<ul><li>
		integer
		</li><li>
		number
		</li><li>
		alpha
		</li><li>
		alphaIgnoreCase
		</li><li>
		time
		</li><li>
		date
		</li><li>
		&lt;javascript function&gt;
		</li></ul>
]]></doc>
		<tooltip><![CDATA[
		javascript function|integer|number|alpha|alphaIgnoreCase|time|date
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="sortListener">
		<doc><![CDATA[
		Executed when the component is sorted.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="sortedColumnIds">
		<doc><![CDATA[
		A string value giving the ordered list of the sorted column ids. read-only
]]></doc>
		<tooltip><![CDATA[
		read-only
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value giving the ordered list of the sorted column ids. read-only
		@return ordered list of the sorted column ids
		]]></getter-doc>
		<setter-doc><![CDATA[
		read-only
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="src">
		<doc><![CDATA[
		An url value pointing to the file to be included.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an url value pointing to the file to be included.
		@return url
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an url value pointing to the file to be included.
		@param src url
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="srcCharSet">
		<doc><![CDATA[
		A string value sprecifying the charset associated to the "src" files.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value sprecifying the charset associated to the "src" files.
		@return charset
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value sprecifying the charset associated to the "src" files.
		@param srcCharSet charset
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="step">
		<doc><![CDATA[
		An int value specifying the step used when increasing/decreasing the value with the up/down arrows or buttons.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="styleClass">
		<doc><![CDATA[
		A space-separated list of CSS style class(es) to be applied to the component. This value will be passed through as the "class" attribute on generated markup.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>styleCLass</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="suggestionConverter">
		<doc><![CDATA[
		A string specifying a converter id or a binding to a converter object. This converter will be used for the values of the list items.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string specifying a converter id or a binding to a converter object. This converter will be used for the values of the list items.
		@return converter id
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string specifying a converter id or a binding to a converter object. This converter will be used for the values of the list items.
		@param suggestionConverter converter id
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="suggestionDelayMs">
		<doc><![CDATA[
		An int value specifying the delay in milliseconds before showing the suggestion list.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an int value specifying the delay in milliseconds before showing the suggestion list.
		@return delay in milliseconds
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an int value specifying the delay in milliseconds before showing the suggestion list.
		@param suggestionDelayMs delay in milliseconds
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="suggestionListener">
		<doc><![CDATA[
		Executed when the component receive an entry.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="suggestionMinChars">
		<doc><![CDATA[
		An int value specifying the minimum number of characters before the suggestion is calculated.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns an int value specifying the minimum number of characters before the suggestion is calculated.
		@return minimum number of characters
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets an int value specifying the minimum number of characters before the suggestion is calculated.
		@param suggestionMinChars minimum number of characters
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="suggestionValue">
		<doc><![CDATA[
		A string value containing the value for the selected select item object.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value containing the value for the selected select item object.
		@return value selected
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value containing the value for the selected select item object.
		@param suggestionValue value selected
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="tabIndex">
		<doc><![CDATA[
		An int value specifying the position of this element in the tabbing order
          for the current document.  This value must be
          an integer between 0 and 32767.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>int</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="text">
		<doc><![CDATA[
		A string value specifying the text (literal or binding) to be shown.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="textAlignment">
		<doc><![CDATA[
		A string value specifying the alignement for the text in the component :
		<ul><li>
		left
		</li><li>
		right
		</li><li>
		center
		</li></ul>
]]></doc>
		<tooltip><![CDATA[
		left|center|right
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="textPosition">
		<doc><![CDATA[
		A string value specifying the position of the text in the component :
		<ul><li>
		left
		</li><li>
		right
		</li><li>
		top
		</li><li>
		bottom
		</li></ul>
]]></doc>
		<tooltip><![CDATA[
		left|right|top|bottom
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="time">
		<doc><![CDATA[
		A string value (time formatted) for the value of the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value (time formatted) for the value of the component.
		@return time typed value
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value (time formatted) for the value of the component.
		@param time time typed value
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>time</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="timeFormat">
		<doc><![CDATA[
		A string sepcifying the format to apply to the time value.
]]></doc>
		<tooltip><![CDATA[
		identical syntax to the Java time format.
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>timeFormat</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="title">
		<doc><![CDATA[
		A string value specifying the title for the document.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value specifying the title for the document.
		@return title
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value specifying the title for the document.
		@param title title
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="toolTipText">
		<doc><![CDATA[
		A string value specifying the tooltip for the component (shown when the pointe hover the component).
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="twoDigitYearStart">
		<doc><![CDATA[
		A string value specifying the year considered as base for selecting a date when the associated dateEntry's value's year has only two digits. 
]]></doc>
		<tooltip><![CDATA[
		ex : 1920
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value specifying the year considered as base for selecting a date when the associated dateEntry's value's year has only two digits. 
		@return pivot year
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value specifying the year considered as base for selecting a date when the associated dateEntry's value's year has only two digits. 
		@param twoDigitYearStart pivot year
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="type">
		<doc><![CDATA[
		A string value specifying the type of data (Java) to convert to or from.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value specifying the type of data (Java) to convert to or from.
		@return type of data
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value specifying the type of data (Java) to convert to or from.
		@param type type of data
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="unlockedClientAttributeNames">
		<doc><![CDATA[
		A string value holding a comma separated list of the client modifiable properties.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="userEventListener">
		<doc><![CDATA[
		Executed when the component is called.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="userExpandable">
		<doc><![CDATA[
		A boolean value indicating wether the user can expand the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value indicating wether the user can expand the component.
		@return true if the user can expand the component
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value indicating wether the user can expand the component.
		@param userExpandable true if the user can expand the component
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="value">
		<doc><![CDATA[
		A string value holding the current value of the component.
 ]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="valueChangeListener">
		<doc><![CDATA[
		Executed when the component's value is changed.
		A string that represent a javascript expression to evaluate and eventually a server action to execute.
		the two parts are separated by a semi-column.
		If the javascript evaluation return false (by using the return keyword) the server action is not executed.
		The server action is represented by a binding.
]]></doc>
		<tooltip><![CDATA[
		ex : "return javascriptFunctionA(event, param1) && javascriptFunctionB(event, param2);#{javaBean.methodA}"
		ex : "alert('Hello World !')"
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="var">
		<doc><![CDATA[
		A string value holding the name of a request-scope attribute under which the model data for the
          row selected by the current value of the "rowIndex" property (i.e.
          also the current value of the "rowData" property) will be exposed.
  ]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="verticalAlign">
		<doc><![CDATA[
		A string that represent the vertical alignement of the data in the component.
		<ul><li>
		top
		</li><li>
		center
		</li><li>
		bottom
		</li></ul>
]]></doc>
		<tooltip><![CDATA[
		top|center|bottom
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string that represent the vertical alignement of the data in the component.
		@return vertical alignement : top|center|bottom
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string that represent the vertical alignement of the data in the component.
		@param verticalAlign vertical alignement : top|center|bottom
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="verticalAlignment">
		<doc><![CDATA[
		A string that represent the vertical alignement of the data in the component.
		<ul><li>
		top
		</li><li>
		center
		</li><li>
		bottom
		</li></ul>
]]></doc>
		<tooltip><![CDATA[
		top|center|bottom
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="verticalScroll">
		<doc><![CDATA[
		A boolean value indicating wether the vertical scroll is shown.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a boolean value indicating wether the vertical scroll is shown.
		@return true if vertical scrollbar is shown
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a boolean value indicating wether the vertical scroll is shown.
		@param verticalScroll true if vertical scrollbar is to be shown
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="verticalScrollPosition">
		<doc><![CDATA[
		A string value specifying the position of the vertical scroolbar (Browser dependant).
]]></doc>
		<tooltip><![CDATA[
		Browser dependant
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="visible">
		<doc><![CDATA[
		A boolean value indicating wether the composant is visible.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>boolean</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="warnImageURL">
		<doc><![CDATA[
		An url string pointing to the image used for a warning message.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>url</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="warnStyleClass">
		<doc><![CDATA[
		A space-separated list of CSS style class(es) to be applied for warning messages. This value will be passed through as the "class" attribute on generated markup.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>styleCLass</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="width">
		<doc><![CDATA[
		A string value (as specified by CSS) for the width of the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value (as specified by CSS) for the width of the component.
		@return width
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value (as specified by CSS) for the width of the component.
		@param width width
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="x">
		<doc><![CDATA[
		A string value (as specified by CSS) for the x position of the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="y">
		<doc><![CDATA[
		A string value (as specified by CSS) for the x position of the component.
]]></doc>
		<tooltip><![CDATA[
]]></tooltip>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<attributeDoc id="zeroResultMessage">
		<doc><![CDATA[
		A string value to be displayed by the component when there's no result. It can embbed keywords (between braces : "{keyword}") :
		<ul><li>
		first: the index of the first row shown
		</li><li>
		position: the index of the first row shown
		</li><li>
		pageposition : the index of the page shown
		</li><li>
		last: a link to the last page
		</li><li>
		rowcount : the total number of rows
		</li><li>
		bfirst: a link to the first page
		</li><li>
		bnext: a link to the next page
		</li><li>
		blast: a link to the last page
		</li><li>
		bpages[:n] : a list of links to pages before and after the page shown (n specifies the number of indexes shown)
		</li><li>
		bprev: a link to the previous page
		</li></ul>
		ex: "No result.\nCome back later !"
]]></doc>
		<tooltip><![CDATA[
		ex: "No result.\nCome back later !"
]]></tooltip>
		<getter-doc><![CDATA[
		Returns a string value to be displayed by the component when there's no result. It can embbed keywords (between braces : "{keyword}") :
		<ul><li>
		first: the index of the first row shown
		</li><li>
		position: the index of the first row shown
		</li><li>
		pageposition : the index of the page shown
		</li><li>
		last: a link to the last page
		</li><li>
		rowcount : the total number of rows
		</li><li>
		bfirst: a link to the first page
		</li><li>
		bnext: a link to the next page
		</li><li>
		blast: a link to the last page
		</li><li>
		bpages[:n] : a list of links to pages before and after the page shown (n specifies the number of indexes shown)
		</li><li>
		bprev: a link to the previous page
		</li></ul>
		ex: "No result.\nCome back later !"
		@return message
		]]></getter-doc>
		<setter-doc><![CDATA[
		Sets a string value to be displayed by the component when there's no result. It can embbed keywords (between braces : "{keyword}") :
		<ul><li>
		first: the index of the first row shown
		</li><li>
		position: the index of the first row shown
		</li><li>
		pageposition : the index of the page shown
		</li><li>
		last: a link to the last page
		</li><li>
		rowcount : the total number of rows
		</li><li>
		bfirst: a link to the first page
		</li><li>
		bnext: a link to the next page
		</li><li>
		blast: a link to the last page
		</li><li>
		bpages[:n] : a list of links to pages before and after the page shown (n specifies the number of indexes shown)
		</li><li>
		bprev: a link to the previous page
		</li></ul>
		ex: "No result.\nCome back later !"
		@param zeroResultMessage message
		]]></setter-doc>
		<wtpEditorClass></wtpEditorClass>
		<type>string</type>
		<icon></icon>
	</attributeDoc>

	<componentDoc id="accelerator">
		<doc><![CDATA[
      <p>The accelerator Component is a non-visual component.</p>
      <p>It allows to associate an accelerator key to an action or another component.</p>
      <p>The accelerator Component has the following capabilities :
      <ul>
        <li>IKeyPressEventCapability</li>
		<li>IImmediateCapability</li>
		<li>IValidationEventCapability</li>
		<li>IForCapability</li>
      </ul>
      </p>
      
        
      <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/AcceleratorComponent.html">accelerator</a> renderer is linked to the <a href="/jsdocs/index.html?f_accelerator.html" target="_blank">f_accelerator</a> javascript class. f_accelerator extends f_object, fa_immediate, fa_eventTarget</p>
      
]]></doc>
		<family>Non Visual</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="box">
		<doc><![CDATA[
		<p>The Box Component is a container.</p>
      <p>It can have a graphical representation or not; But it is mainly used to apply a collective treatment to a set of component, for example show or hide a group of component.</p>
      <p>The Box Component has the following capabilities :
      <ul>
        <li>IBackgroundImageCapability</li>
		<li>IBorderCapability</li>
		<li>IMouseEventCapability</li>
		<li>IInitEventCapability</li>
		<li>ILoadEventCapability</li>
		<li>IMenuCapability</li>
		<li>IAsyncRenderModeCapability</li>
		<li>IAsyncDecodeModeCapability</li>
		<li>ITypedComponentCapability</li>
		<li>IOverStyleClassCapability</li>
		<li>IScrollableCapability</li>
      </ul>
      </p>
      
      <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/BoxComponent.html">box</a> renderer is linked to the <a href="/jsdocs/index.html?f_box.html" target="_blank">f_box</a> javascript class. f_box extends f_component, fa_asyncRender, fa_subMenu</p>
      
     <p>Table of component style classes : </p>

	<table border="1" cellpadding="3" cellspacing="0" width="100%">
	<tbody>
	<tr style="text-align:left">
		<th  width="33%">Style Name</th>
		<th  width="50%">Description</th>
	</tr>
	<tr style="text-align:left">
		<td width="33%">f_box</td>
		<td width="50%">Defines styles for the wrapper element of the component</td>
	</tr>
      </tbody>
	</table>
      
]]></doc>
		<family>Basic</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="button">
		<doc><![CDATA[
      <p>The button Component is equivalent to the standard HTML tag &lt;BUTTON&gt;.</p>
      <p>The button Component has the following capabilities :
      <ul>
        <li>ITextCapability</li>
		<li>ITextDirectionCapability</li>
		<li>ISelectionEventCapability</li>
		<li>IReadOnlyCapability</li>
		<li>IAlternateTextCapability</li>
		<li>IFocusStyleClassCapability</li> 
      </ul>
      </p>
      
	  <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ButtonComponent.html">button</a> renderer is linked to the <a href="/jsdocs/index.html?f_button.html" target="_blank">f_button</a> javascript class. f_box extends f_component, fa_asyncRender, fa_subMenu</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_button</td>
			<td width="50%">Defines styles for the wrapper Input element</td>
		</tr>
		
		</tbody>
		</table>	
      
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="calendar">
		<doc><![CDATA[
      <p>The calendar Component shows a calendar. It can be customized in differents ways (days off, holidays, tool tips ...).</p>
      <p>The calendar Component has the following capabilities :
      <ul>
        <li>ISelectionEventCapability</li>
		<li>IReadOnlyCapability</li>
		<li>ILiteralLocaleCapability</li>
		<li>ILiteralTimeZoneCapability</li>
		<li>IComponentLocaleCapability</li>
		<li>IComponentTimeZoneCapability</li>
		<li>IClientDatesStrategyCapability</li> 
		<li>IBorderCapability</li>
		<li>ICalendarLayoutCapability</li>
		<li>IMultipleSelectCapability</li>
		<li>ICalendarModeCapability</li>
      </ul>
      </p>
      
       
	  <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/CalendarComponent.html">calendar</a> renderer is linked to the <a href="/jsdocs/index.html?f_calendar.html" target="_blank">f_calendar</a> javascript class. f_calendar extends f_component, fa_readOnly, fa_disabled, fa_itemsWrapper</p>

       <p> Table of the main component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_calendar_yearCursor</td>
			<td width="50%">Defines styles for the wrapper Table element used to change years of the calendar. Contains other style</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_calendar_monthList</td>
			<td width="50%">Defines styles for the wrapper Table element the element containing the  months of year  </td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_calendar_dayList</td>
			<td width="50%">Defines styles for the wrapper Table element the element containing the day list of year  </td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_calendar_day</td>
			<td width="50%">Defines styles for the A element</td>
		</tr>
		
		
		</tbody>
		</table>	
      
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="card">
		<doc><![CDATA[
		An element belonging to a <a href="/comps/cardBoxComponent.html">cardBox Component</a> and holding the components.
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="cardBox">
		<doc><![CDATA[
      <p>The cardBox Component is similar to the <a href="/comps/tabbedPaneComponent.html">tabbedPane Component</a> without title and borders. It is usefull for showing alternatively different contents on the same page.</p>
      <p>The cardBox Component has the following capabilities :
      <ul>
        <li>ISelectionEventCapability</li>
		<li>IAsyncRenderModeCapability</li>
		<li>IPreferencesSettings</li>
		<li>IVariableScopeCapability</li>
		<li>IAsyncDecodeModeCapability</li>
      </ul>
      </p>
      
      <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/CardBoxComponent.html">cardBox</a> renderer is linked to the <a href="/jsdocs/index.html?f_cardBox.html" target="_blank">f_cardBox</a> javascript class. f_cardBox extends f_component, fa_immediateu</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_cardBox</td>
			<td width="50%">Defines styles for the wrapper DIV element</td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_cardBox_card</td>
			<td width="50%">Defines styles for the wrapper DIV element for each <a href="/apidocs/index.html?org/rcfaces/core/component/CardComponent.html">card</a></td>
		</tr>
		
		</tbody>
		</table>	
      
      
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="checkButton">
		<doc><![CDATA[
      <p>The checkButton Component is equivalent to the &lt;INPUT TYPE="checkbox"&gt; HTML tag.</p>
      <p>The checkButton Component has the following capabilities :
      <ul>
        <li>ITextCapability</li>
		<li>ITextDirectionCapability</li>
		<li>IHorizontalTextPositionCapability</li>
		<li>ISelectionEventCapability</li>
		<li>IReadOnlyCapability</li>
		<li>IAlternateTextCapability</li>
		<li>IFocusStyleClassCapability</li>
		<li>ISeverityStyleClassCapability</li>
		<li>ISelectedCapability</li>
      </ul>
      </p>
      
      
      <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/CheckButtonComponent.html">checkButton</a> renderer is linked to the <a href="/jsdocs/index.html?f_checkButton">f_checkButton</a> javascript class. f_checkButton extends f_button</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_checkButton</td>
			<td width="50%">Defines styles for the wrapper DIV element</td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_checkButton_input</td>
			<td width="50%">Defines styles for the wrapper Input button element </td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_checkButton_text</td>
			<td width="50%">Defines styles for the wrapper Span element containing the text </td>
		</tr>
		
		</tbody>
		</table>	
      
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<!--<componentDoc id="checkButton3States">
		<doc><![CDATA[
      <p>The checkButton3States Component is a <a href="/comps/checkButtonComponent.html">CheckButton</a> with 3 states : Check, unchecked and undefined. It is often used to show the state of a group of checkButtons</p>
      <p>This component is <b>experimental</b>.</p>
      <p>The checkButton3States Component has the following capabilities :
      <ul>
        <li>ITextCapability</li>
		<li>ITextDirectionCapability</li>
		<li>IHorizontalTextPositionCapability</li>
		<li>ISelectionEventCapability</li>
		<li>IReadOnlyCapability</li>
		<li>IAlternateTextCapability</li>
		<li>IFocusStyleClassCapability</li>
		<li>ISelected3StatesCapability</li>
      </ul>
      </p>
      
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/BoxComponent.html">box</a> renderer is linked to the <a href="/jsdocs/index.html?f_box.html" target="_blank">f_button</a> javascript class. f_box extends f_component, fa_asyncRender, fa_subMenu</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_button</td>
			<td width="50%">Defines styles for the wrapper Input element</td>
		</tr>
		
		</tbody>
		</table>	
      
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	--><componentDoc id="clientData">
		<doc><![CDATA[
		A tag used to associate data to a view.
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="combo">
		<doc><![CDATA[
      <p>The combo Component is equivalent to the standard HTML tag &lt;SELECT SIZE=1&gt;.</p>
      <p>The combo Component has the following capabilities :
      <ul>
        <li>ISelectionEventCapability</li>
		<li>IRequiredCapability</li>
		<li>IFocusStyleClassCapability</li>
		<li>ISeverityStyleClassCapability</li>
		<li>IFilterCapability </li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ComboComponent.html">comboComponent</a> renderer is linked to the <a href="/jsdocs/index.html?f_combo.html" target="_blank">f_combo</a> javascript class. f_combo extends f_abstractList, fa_selectionProvider</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_combo</td>
			<td width="50%">Defines styles for the wrapper Select element</td>
		</tr>
		
		</tbody>
		</table>	
      
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>
	
	<componentDoc id="comboGrid">
		<doc><![CDATA[
	
		<p>The comboGrid Component has the same fonctionalities as the combo component but the popup is based on a dataGrid.
		The comboGrid can have multiple columns, be filtered, paged and some other datagrid capabilities</p>
		<p>The comboGrid Component has the following capabilities :
		<ul>
		<li>IAdditionalInformationEventCapability</li>
		<li>IAdditionalInformationValuesCapability</li>
		<li>IClientAdditionalInformationFullStateCapability</li>
		<li>IAdditionalInformationCardinalityCapability</li>
		<li>IRowStyleClassCapability</li>
		<li>IPagerMessageCapability</li>
		<li>IFilterCapability</li>
		<li>IPagedCapability</li>
		<li>IHeaderVisibilityCapability</li>
		<li>IOrderedChildrenCapability</li>
		<li>ISortedChildrenCapability</li>
		<li>IComponentValueTypeCapability</li>
		<li>IAdditionalInformationRangeComponent</li>
		</ul>
		</p>
		<p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ComboGridComponent.html"> comboGrid </a> renderer is link to the <a href="/jsdocs/index.html?f_comboGrid.html" target="_blank">f_comboGrid</a> javascript class. f_comboGrid extends f_keyEntry, fa_dataGridPopup</p>
		
		<p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_comboGrid</td>
			<td id="ermvsh" width="50%">Defines styles for the wrapper Table element</td>
		</tr>
		<tr style="text-align:left">
			<td width="33%">f_comboGrid_input</td>
			<td width="50%">Defines styles for the Input Text</td>
		</tr>
		<tr style="text-align:left">
			<td width="33%">f_comboGrid_popup</td>
			<td width="50%">Defines styles for the wrapper DIV elment of the pop-up. Contains fa_dataGridPopup styles</td>
		</tr>
		
		</tbody>
		</table>	

]]></doc>
		<family>Layout</family>
		<icon></icon>
	</componentDoc>
	

	<componentDoc id="componentsGrid">
		<doc><![CDATA[
		
	<p>The componentGrid Component is a grid component. It can be compared to the grid found in the list part of the modern file explorer. It allows sorts, resizing, contextual menus ...</p>
  	<p>The componentGrid Component is an evolution of <a href="/comps/dataGridComponent.html">dataGrid component</a>. This component is a component container, it allows to:
  	<ul>
  		<li>ISelectionEventCapability</li>
		<li>ISelectableCapability</li>
		<li>ISelectionCardinalityCapability</li>
		<li>ISelectedValuesCapability</li>
		<li>IClientSelectionFullStateCapability</li>
		<li>IAdditionalInformationEventCapability</li>
		<li>IAdditionalInformationValuesCapability</li>
		<li>IClientAdditionalInformationFullStateCapability</li>
		<li>IAdditionalInformationCardinalityCapability</li>
		<li>IDoubleClickEventCapability</li>
		<li>ILoadEventCapability</li>
		<li>IRequiredCapability</li>
		<li>IBorderCapability</li>
		<li>IRowStyleClassCapability</li>
		<li>IShowValueCapability</li>
		<li>IEmptyDataMessageCapability</li>
		<li>IMenuCapability</li>
		<li>IScrollableCapability</li>
		<li>IPreferencesSettings</li>
		<li>IPagedCapability</li>
		<li>IHeaderVisibilityCapability</li>
		<li>IGridComponent</li>
		<li>IOrderedChildrenCapability</li>
		<li>ISortedChildrenCapability</li>
		<li>IComponentValueTypeCapability</li>
		<li>ISelectionRangeComponent</li>
		<li>ISortedComponentsCapability</li>
		<li>IAdditionalInformationRangeComponent</li>	
		</ul></p>
		
		<p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ComponentsGridComponent.html"> componentsGrid </a> renderer is link to the <a href="/jsdocs/index.html?f_componentsGrid.html" target="_blank">f_componentsGrid</a> javascript class. f_componentsGrid extends f_grid</p>
		
		<p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_componentsGrid</td>
			<td id="ermvsh" width="50%">Defines styles for the wrapper DIV element. Contains f_grid styles.</td>
		</tr>
		</tbody>
		</table>
		
		
		
]]></doc>
		<family>Layout</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="componentsList">
		<doc><![CDATA[
		<p>The componentslist component Shows the components for each data with pagination.</p>
		<p>The componentslist Component has the following capabilities :
		<ul>
		<li>IMenuCapability</li>
		<li>IBorderCapability</li>
		<li>IBorderTypeCapability</li>
		<li>IScrollableCapability</li>
		<li>IShowValueCapability </li>
		</ul>
		</p>
		
		
		<p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ComponentsListComponent.html"> componentsList </a> renderer is link to the <a href="/jsdocs/index.html?f_componentsGrid.html" target="_blank">f_componentslist</a> javascript class. f_componentslist extends f_component, fa_pagedComponent</p>
		
		<p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_componentslist</td>
			<td id="ermvsh" width="50%">Defines styles for the wrapper DIV element. Contains a Table</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_componentslist_cell</td>
			<td id="ermvsh" width="50%">Defines styles for the wrapper TD element for the row.</td>
		</tr>
		</tbody>
		</table>
		
		
		
]]></doc>
		<family>Layout</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="convertByte">
		<doc><![CDATA[
		Byte converter
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="convertDouble">
		<doc><![CDATA[
		Double converter
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="convertFloat">
		<doc><![CDATA[
		Float converter
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="convertInteger">
		<doc><![CDATA[
		Integer converter
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="convertLong">
		<doc><![CDATA[
		Long converter
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="convertShort">
		<doc><![CDATA[
		Short converter
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="cssStyle">
		<doc><![CDATA[
		Css style
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="customButton">
		<doc><![CDATA[
		A button Component highly customizable through its API.
]]></doc>
		<family>Custom</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="dataColumn">
		<doc><![CDATA[
		Specify a column.
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="dataGrid">
		<doc><![CDATA[
      <p>The dataGrid Component is a grid component. It can be compared to the grid found in the list part of the modern file explorer. It allows sorts, resizing, contextual menus ...</p>
      <p>The dataGrid Component has the following capabilities :
      <ul>
        <li>ISelectionEventCapability</li>
		<li>ISelectableCapability</li>
		<li>ISelectionCardinalityCapability</li>
		<li>ISelectedValuesCapability</li>
		<li>IDragEventCapability</li>
		<li>IDraggableCapability</li>
		<li>IDropEventCapability</li>
		<li>IDropCompleteEventCapability</li>
		<li>IDroppableCapability</li>
		<li>ICheckEventCapability</li>
		<li>ICheckableCapability</li>
		<li>ICheckCardinalityCapability</li>
		<li>ICheckedValuesCapability</li>
		<li>IAdditionalInformationEventCapability</li>
		<li>IAdditionalInformationValuesCapability</li>
		<li>IClientAdditionalInformationFullStateCapability</li>
		<li>IAdditionalInformationCardinalityCapability</li>
		<li>IDoubleClickEventCapability</li>
		<li>ILoadEventCapability</li>
		<li>IRequiredCapability</li>
		<li>IRowStyleClassCapability</li>
		<li>IEmptyDataMessageCapability</li>
		<li>IReadOnlyCapability</li>
		<li>IDisabledCapability</li>
		<li>IMenuCapability</li>
		<li>IScrollableCapability</li>
		<li>IFilterCapability</li>
		<li>IShowValueCapability</li>
		<li>IPreferencesSettings</li>
		<li>IPagedCapability</li>
		<li>IClientSelectionFullStateCapability</li>
		<li>IClientCheckFullStateCapability</li>
		<li>IHeaderVisibilityCapability</li>
		<li>ICursorProvider</li>
		<li>IGridComponent</li>
		<li>IDroppableGridComponent</li>
		<li>IOrderedChildrenCapability</li>
		<li>ISortedChildrenCapability</li>
		<li>IComponentValueTypeCapability</li>
		<li>ISelectionRangeComponent</li>
		<li>ICheckRangeComponent</li>
		<li>ISortedComponentsCapability</li>
		<li>IAdditionalInformationRangeComponent</li>
		<li>IDraggableGridComponent</li>
      </ul>
      </p>
      
      <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/DataGridComponent.html">dataGridComponent</a> renderer is link to the <a href="/jsdocs/index.html?f_dataGrid.html" target="_blank">f_dataGrid</a> javascript class. f_dataGrid extends f_grid, fa_readOnly, fa_checkManager, fa_droppable, fa_draggable, fa_autoOpen</p>
		
		<p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_dataGrid</td>
			<td id="ermvsh" width="50%">Defines styles for the wrapper DIV element.</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_grid_dataTitle_scroll</td>
			<td id="ermvsh" width="50%">Defines styles for the wrapper DIV element for the header of colums.</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_grid_dataBody_scroll</td>
			<td id="ermvsh" width="50%">Defines styles for the wrapper DIV element for the body.</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_grid_sortManager</td>
			<td id="ermvsh" width="50%">Defines styles for the wrapper DIV element for the pop-up od the sort manager.</td>
		</tr>
		</tbody>
		</table>
      
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="dateChooser">
		<doc><![CDATA[
      <p>The dateChooser Component is a button that shows a calendar and help the user to choose a date. It can be associated to a entry field, the choosen date is then automatically entered in the field. It works like an <a href="/comps/imageButtonComponent.html">Image Button Component</a>. The dateChooser Component does <b>not</b> provide an Entry field.</p>
      <p>The dateChooser Component has the following capabilities :
      <ul>
        <li>IImageButtonFamilly,
		<li>IValueChangeEventCapability,
		<li>IForCapability,
		<li>ICalendarLayoutCapability</li>
      </ul>
      </p>
      
      <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/DateChooserComponent.html">dateChooser</a> renderer is link to the <a href="/jsdocs/index.html?f_dateChooser.html" target="_blank">f_dateChooser</a> javascript class. f_dateChooser extends f_imageButton, fa_calendarPopup</p>
		
		<p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_dateChooser</td>
			<td id="ermvsh" width="50%">Defines styles for the wrapper DIV element.</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_dateChooser_image</td>
			<td id="ermvsh" width="50%">Defines styles for the wrapper IMG element for the calendar icone  .</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_dateChooser_popup</td>
			<td id="ermvsh" width="50%">Defines styles for the wrapper DIV element for the calendar pop-up.</td>
		</tr>
		</tbody>
		</table>
      
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="dateEntry">
		<doc><![CDATA[
      <p>The dateEntry Component is a specialized <a href="/comps/textEntryComponent.html">textEntry Component</a>. it sports auto-completion related to the validity of the numbers entered as a date.</p>
      <p>The dateEntry Component has the following capabilities :
      <ul>
        <li>PIRequiredCapability</li>
		<li>IAutoTabCapability</li>
		<li>IValueChangeEventCapability</li>
		<li>IFocusStyleClassCapability</li>
		<li>ISeverityStyleClassCapability</li>
		<li>IDateFormatCapability</li>
		<li>IValidationParameters</li>
      </ul>
      </p>
      
        <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/DateEntryComponent.html">dateEntry</a> renderer is link to the <a href="/jsdocs/index.html?f_dateEntry.html" target="_blank">f_dateEntry</a> javascript class. f_dateEntry extends f_compositeNumEntry, fa_calendarPopup</p>
		
		<p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_dateEntry</td>
			<td id="ermvsh" width="50%">Defines styles for the wrapper DIV element</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_dateEntry_dd</td>
			<td id="ermvsh" width="50%">Defines styles for day INPUT element.</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_dateEntry_MM</td>
			<td id="ermvsh" width="50%">Defines styles for month INPUT element.</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_dateEntry_yyyy</td>
			<td id="ermvsh" width="50%">Defines styles for years INPUT element.</td>
		</tr>
		</tbody>
		</table>
      
      
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="dateItem">
		<doc><![CDATA[
		An item specialized for date values.
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="expandBar">
		<doc><![CDATA[
      <p>The expandBar Component is a container that can be collapsed to show only a title bar. Expand Bars can be managed by group : only one element of the group is expanded.</p>
      <p>The expandBar Component has the following capabilities :
      <ul>
        <li>IExpandEventCapability</li>
		<li>IAsyncRenderModeCapability</li>
		<li>IFontCapability</li>
		<li>IDisabledCapability</li>
		<li>IReadOnlyCapability</li>
		<li>ITextCapability</li>
		<li>ITextDirectionCapability</li>
		<li>ITextAlignmentCapability</li>
		<li>ICollapsableCapability</li>
		<li>IBorderCapability</li>
		<li>IAccessKeyCapability</li>
		<li>ITabIndexCapability</li>
		<li>IRadioGroupCapability</li>
		<li>IFocusBlurEventCapability</li>
		<li>ISelectionEventCapability</li>
		<li>ILoadEventCapability</li>
		<li>IVariableScopeCapability</li>
		<li>IOverStyleClassCapability</li>
		<li>IAsyncRenderComponent</li>
      </ul>
      </p>
      
        <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ExpandBarComponent.html">expandBar</a> renderer is link to the <a href="/jsdocs/index.html?f_expandBar.html" target="_blank">f_expandBar</a> javascript class. f_expandBar extends f_component, fa_disabled, fa_readOnly, fa_collapsed, fa_groupName, fa_overStyleClass</p>
		
		<p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_expandBar</td>
			<td id="ermvsh" width="50%">Defines styles for the wrapper UL element</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_expandBar_head</td>
			<td id="ermvsh" width="50%">Defines styles for the LI element for the title.</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_expandBar_body</td>
			<td id="ermvsh" width="50%">Defines styles for the element for the body.</td>
		</tr>
		
		</tbody>
		</table>
      
      
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="externalBox">
		<doc><![CDATA[
		<p>The externalBox Component is a container based on the standard HTML tag &lt;IFrame&gt;.  .</p>
      <p>The externalBox Component has the following capabilities :
      <ul>
	<li>ILoadEventCapability</li>
	<li>IOverStyleClassCapability</li>       
     </ul>
     </p>
     
     
        <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ExternalBoxComponent.html">externalBox</a> renderer is link to the <a href="/jsdocs/index.html?f_externalBox.html" target="_blank">f_externalBox</a> javascript class. f_externalBox extends f_component</p>
		

    <p>Table of component style classes : </p>
   
   <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_externalBox</td>
			<td id="ermvsh" width="50%">Defines styles for the wrapper Frame element</td>
		</tr>
		
		
		</tbody>
		</table>
  	

]]></doc>
		<family>Basic</family>
		<icon></icon>
	</componentDoc>
	


	<componentDoc id="fieldSet">
		<doc><![CDATA[
		<p>The fieldSet Component is a container with a title (text and/or picture).</p>
      <p>The fieldSet Component has the following capabilities :
      <ul>
        <li>IFontCapability</li>
	<li>ITextCapability</li>
	<li>ITextDirectionCapability</li>
	<li>ITextAlignmentCapability</li>
	<li>IVerticalAlignmentCapability</li>
	<li>IBorderTypeCapability</li>
	<li>IImageCapability</li>
	<li>IImageSizeCapability</li>
	<li>IVariableScopeCapability</li>
	<li>IOverStyleClassCapability</li>
	<li>IImageAccessorsCapability</li>       
     </ul>
     </p>
     
     
        <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/FieldSetComponent.html">fieldSet</a> renderer is link to the <a href="/jsdocs/index.html?f_fieldSet.html" target="_blank">f_fieldSet</a> javascript class. f_fieldSet extends f_component, fa_overStyleClass</p>
		

    <p>Table of component style classes : </p>
   
    <table border="1" cellpadding="3" cellspacing="0" width="100%">
<tbody >
	<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		<tr style="text-align:left">
		<td width="33%">f_fieldSet
		</td>
		<td width="50%">
		Defines styles for the wrapper DIV element
		</td>
		</tr>
		<tr style="text-align:left">
		<td  width="33%">
		f_fieldSet_cellBody
		</td>
		<td width="50%">
		Edit style of fieldSet body
		</td>
		</tr>
		<tr style="text-align:left">
		<td width="33%">
		fb_rounded
		</td>
		<td width="50%">
		The border rouned style class (contains the title)
		</td>
		</tr>
		</tbody>
		</table>		

]]></doc>
		<family>Basic</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="focusManager">
		<doc><![CDATA[
      <p>The focusManager Component is a non-visual component.</p>
      <p>It allows to deal with the focus on the current page.</p>
      
      <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/FocuManagerComponent.html">focuManager</a> renderer is link to the <a href="/jsdocs/index.html?f_focuManager.html" target="_blank">f_focuManager</a> javascript class. f_focuManager extends f_object, fa_serializable</p>
		
]]></doc>
		<family>Non Visual</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="helpButton">
		<doc><![CDATA[
		<p>The helpButton Component is an <A href="/comps/imageButtonComponent.html">ImageButton</A>. It opens a new page showing the url specified in the "helpUrl" property of a component linked by the "for" property.</p>
      <p>The helpButton Component has the following capabilities :
      <ul>
       <li>IForCapability</li>
      </ul>
      </p>
	   
      <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/HelpButtonComponent.html">helpButton</a> renderer is link to the <a href="/jsdocs/index.html?f_helpButton.html" target="_blank">f_helpButton</a> javascript class. f_helpButton extends f_imageButton</p>
		
	
     <p>Table of component style classes : </p>
     
<table border="1" cellpadding="3" cellspacing="0"  width="100%">
<tbody >
<tr  style="text-align:left">
<td bgcolor="#eeeeee"  width="33%">
Style Name
</td>
<td bgcolor="#eeeeee"  width="50%">
Description
</td>
</tr>
<tr  style="text-align:left">
<td  width="33%">
f_helpButton
</td>The server reported an error while performing the "cvs commit" command.
  org.rcfaces.core: cvs commit: sticky tag `1.3' for file `metadatas/camelia-doc.xml' is not a branch
  org.rcfaces.core: cvs [commit aborted]: correct above errors first!

<td width="50%">
Defines styles for the wrapper DIV element
</td>
</tr>
<tr style="text-align:left">
<td  width="33%">
f_helpButton_ctext
</td>
<td width="50%">
Defines styles for the button Text
</td>
</tr>
<tr style="text-align:left">
<td width="33%">
f_helpButton_cimage
</td>
<td width="50%">
Defines styles for the button Image
</td>
</tr>
</tbody>
</table>

]]></doc>
		<family>Basic</family>
		<icon></icon>
	</componentDoc>

	<!--<componentDoc id="helpMessageZone">
		<doc><![CDATA[
		<p>The helpMessageZone Component is a placeholder for help messages. The messages are shown when the pointer hover a component and this component has a "helpMessage" property.</p>
      <p>The helpMessageZone Component has the following capabilities :
      <ul>
        <li>Position &amp; Size</li>
        <li>Foreground &amp; Background Color</li>
        <li>Text, font &amp; position</li>
        <li>Margin &amp; border</li>
        <li>Help</li>
        <li>Visibility</li>
      	<li>Events Handling</li>
      </ul>
      </p>
]]></doc>
		<family>Basic</family>
		<icon></icon>
	</componentDoc>

	--><componentDoc id="hiddenValue">
		<doc><![CDATA[
      <p>The hiddenValue Component is a non-visual component. It is equivalent to and Input hidden type HTML tag.</p>
      <p>It allows to access and store value on the client and on the server while keeping it concealed. The clientData Component can also be used.</p>
      <p>The hiddenValue Component has the following capability :
      <ul>
        <li>IClientDataCapability</li>
		<li>IServerDataCapability</li>
		<li>IPropertyChangeEventCapability</li>
		<li>IImmediateCapability</li>
		<li>IValueLockedCapability</li>
		<li>IValidationEventCapability</li>
		<li>IUserEventCapability</li>
		<li>IClientDataManager</li>
		<li>IServerDataManager</li>
      </ul>
      </p>
      
        <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/HiddenValueComponent.html">hiddenValue</a> renderer is link to the <a href="/jsdocs/index.html?f_hiddenValue.html" target="_blank">f_hiddenValue</a> javascript class. f_hiddenValue extends f_eventTarget, fa_serializable, fa_clientData</p>
	  
]]></doc>
		<family>Non Visual</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="hyperLink">
		<doc><![CDATA[
		<p>The hyperLink Component translates into a classic hyperlink and is a <A href="/comps/buttonComponent.html">button</A>.</p>
      <p>The hyperLink Component has the following capabilities :
      <ul>
        <li>Position &amp; Size</li>
        <li>Foreground &amp; Background Color</li>
        <li>Text, font &amp; image</li>
        <li>Help</li>
        <li>Visibility, Read-Only, Disabled</li>
      	<li>Events Handling</li>
      </ul>
      </p>
      
     
    <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/HyperLinkComponent.html">hyperLink</a> renderer is link to the <a href="/jsdocs/index.html?f_hyperLink.html" target="_blank">f_hyperLink</a> javascript class. f_hyperLink extends f_input, fa_immediate, fa_value</p>
	  
      
    <p>Table of component style classes : </p>

	<table border="1" cellpadding="3" cellspacing="0" width="100%">
	<tbody >
	<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
	<tr id="pwsif0" style="text-align:left">
		<td  width="33%">f_hyperLink</td>
		<td  width="50%">Defines styles for the wrapper element of the component</td>
	</tr>
      </tbody>
	</table>
      
      
]]></doc>
		<family>Basic</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="image">
		<doc><![CDATA[
		<p>The image Component shows an image (it's equivalent to &lt;img .../&gt;).</p>
      <p>The image Component has the following capabilities :
      <ul>
	        <li>IImageCapability</li>
		<li>IImageSizeCapability</li>
		<li>IAlternateTextCapability</li>
		<li>IFilterCapability</li>
		<li>IImageAccessorsCapability</li>      </ul>
      </p>
      
      
        
      <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ImageComponent.html">image</a> renderer is linked to the <a href="/jsdocs/index.html?f_image.html" target="_blank">f_image</a> javascript class. f_image extends f_filtredComponent</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_image</td>
			<td width="50%">Defines styles for the wrapper IMG element</td>
		</tr>
		
		
		</tbody>
		</table>	

]]></doc>
		<family>Basic</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="imageButton">
		<doc><![CDATA[
      <p>The imageButton Component is a <a href="/comps/buttonComponent.html">button Component</a> that can show an image.</p>
      <p>The imageButton Component has the following capabilities :
      <ul>
        <li>IImageButtonFamilly </li>
		 <li>IImageAccessorsCapability </li>
      </ul>
      </p>
      
         
      <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ImageButtonComponent.html">imageButton</a> renderer is linked to the <a href="/jsdocs/index.html?f_imageButton.html" target="_blank">f_imageButton</a> javascript class. f_imageButton extends f_component, fa_readOnly, fa_disabled, fa_tabIndex, fa_borderType, fa_images, fa_immediate, fa_value, fa_aria</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imageButton</td>
			<td width="50%">Defines styles for the wrapper IMG element</td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imageButton_text</td>
			<td width="50%">Defines styles for the wrapper SPAN element for text</td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imageButton_image</td>
			<td width="50%">Defines styles for the wrapper IMG element</td>
		</tr>
		
		
		</tbody>
		</table>	
      
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="imageCheckButton">
		<doc><![CDATA[
      <p>The imageCheckButton Component is a <a href="/comps/checkButtonComponent.html">checkButton Component</a> with an image instead of the checkBox.</p>
      <p>The imageCheckButton Component has the following capabilities :
      <ul>
        <li>IImageButtonFamilly</li>
      </ul>
      </p>
      
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ImageCheckButtonComponent.html">imageCheckButton</a> renderer is linked to the <a href="/jsdocs/index.html?f_imageCheckButton.html" target="_blank">f_imageCheckButton</a> javascript class. f_imageCheckButton extends f_imageButton, fa_selected</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imageCheckButton</td>
			<td width="50%">Defines styles for the wrapper A element</td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imageCheckButton_image</td>
			<td width="50%">Defines styles for the  IMG element</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="imageCombo">
		<doc><![CDATA[
      <p>The imageCombo Component is a <a href="/comps/comboComponent.html">combo Component</a> with an image added to the text.</p>
      <p>The imageCombo Component has the following capabilities :
      <ul>
        <li>IImageButtonFamilly</li>
		<li>IShowDropDownMarkCapability</li>
      </ul>
      </p>
      
      
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ImageComboComponent.html">imageCombo</a> renderer is linked to the <a href="/jsdocs/index.html?f_imageCombo.html" target="_blank">f_imageCombo</a> javascript class. f_imageCombo extends f_imageButton, fa_subMenu, fa_itemsWrapper</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imageCombo</td>
			<td width="50%">Defines styles for the wrapper DIV element</td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imageCheckButton_ctext</td>
			<td width="50%">Defines styles for the  Text element of the combo</td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imageCheckButton_cimage</td>
			<td width="50%">Defines styles for the IMG element of the combo</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_menu_popup</td>
			<td width="50%">Defines styles for the pop-up element of the combo</td>
		</tr>
		
		</tbody>
		</table>	
      
      
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="imagePagerButton">
		<doc><![CDATA[
		<p>The imagePagerButton Component is an <a href="/comps/imageButtonComponent.html">imageButton Component</a> that works like the keyword in the <a href="/comps/pagerComponent.html">pager Component</a> and is linked to the <a href="/comps/dataGridComponent.html">dataGrid Component</a>.
      It shows informations about the result set (ex: number of available pages) 
      and can give direct access to a specific page ("a la Google").</p>
      <p>The imagePagerButton Component has the following capabilities :
      <ul>
        <li>IForCapability</li>
      </ul>
      </p>
      <p>The authorized types are :
      <ul>
        <li>first</li>
        <li>prev</li>
        <li>next</li>
        <li>last</li>
        <li>&lt;number&gt; where number is a page number</li>
      </ul>
      </p>
      
        <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ImagePagerButtonComponent.html">imagePagerButton</a> renderer is linked to the <a href="/jsdocs/index.html?f_imagePagerButton.html" target="_blank">f_imagePagerButton</a> javascript class. f_imagePagerButton extends f_imageButton, fa_pager</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imagePagerButton</td>
			<td width="50%">Defines styles for the wrapper DIV element</td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imagePagerButton_text</td>
			<td width="50%">Defines styles for the SPAN element of the button</td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imagePagerButton_image</td>
			<td width="50%">Defines styles for the A and IMG elements of the button</td>
		</tr>
		
		</tbody>
		</table>	
      
      
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="imageRadioButton">
		<doc><![CDATA[
      <p>The imageRadioButton Component is a <a href="/comps/radioButtonComponent.html">radioButton Component</a> with an image instead of the rounded box.</p>
      <p>The imageRadioButton Component has the following capabilities :
        <ul>
        <li>IImageButtonFamilly </li>
      </ul>
      </p>
      
	<p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ImageRadioButtonComponent.html">imageRadioButton</a> renderer is linked to the <a href="/jsdocs/index.html?f_imageRadioButton.html" target="_blank">f_imageRadioButton</a> javascript class. f_imageRadioButton extends f_imageCheckButton, fa_groupName, fa_required</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imageRadioButton</td>
			<td width="50%">Defines styles for the wrapper A element</td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imageRadioButton_image</td>
			<td width="50%">Defines styles for the  IMG element</td>
		</tr>
		
		</tbody>
		</table>	      
      
      
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="imageResetButton">
		<doc><![CDATA[
      <p>The imageResetButton Component is a <a href="/comps/resetButtonComponent.html">resetButton Component</a> that can show an image.</p>
      <p>The imageResetButton Component has the following capabilities :
      <ul>
        <li>IImageButtonFamilly </li>
      </ul>
      </p>
      
      <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ImageResetButtonComponent.html">imageResetButton</a> renderer is linked to the <a href="/jsdocs/index.html?f_imageResetButton.html" target="_blank">f_imageResetButton</a> javascript class. f_imageResetButton extends f_imageButton</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imageResetButton</td>
			<td width="50%">Defines styles for the wrapper A element</td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imageResetButton_image</td>
			<td width="50%">Defines styles for the  IMG element</td>
		</tr>
		
		</tbody>
		</table>	      
      
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="imageSubmitButton">
		<doc><![CDATA[
      <p>The ImageSubmitButton Component is a <a href="/comps/submitButtonComponent.html">submitButton Component</a> that can show an image.</p>
      <p>The ImageSubmitButton Component has the following capabilities :
      <ul>
         <li>IImageButtonFamilly </li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ImageSubmitButtonComponent.html">imageSubmitButton</a> renderer is linked to the <a href="/jsdocs/index.html?f_imageSubmitButton.html" target="_blank">f_imageSubmitButton</a> javascript class. f_imageSubmitButton extends f_imageButton</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imageSubmitButton</td>
			<td width="50%">Defines styles for the wrapper A element</td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imageSubmitButton_image</td>
			<td width="50%">Defines styles for the IMG element</td>
		</tr>
		
		</tbody>
		</table>	    
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="init">
		<doc><![CDATA[
		<p><b>Mandatory</b>.</p>
		<p>It holds the included javascript and css files. It is responsible for initializing RCFaces javascript engine.</p>
		<p>It <b>must</b> be the first tag for a page.</p>
		 <p>The ImageSubmitButton Component has the following capabilities :
      	<ul>
        	 <li>IPageConfigurator</li>
     	 </ul>
     	 </p>
		
]]></doc>
		<family>Non visual</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="javaScript">
		<doc><![CDATA[
		<p>Specifies includes and required javascript classes.<p>
		<p>The JavaScript Component has the following attributes :
      	<ul>
        	<li>src</li>
        	<li>requiredClasses</li>
			<li>requiredFiles</li>
			<li>requiredModules</li>
			<li>requiredSets</li>
     	 </ul>
     	 </p>
		
		
		
		
]]></doc>
		<family>Non visual</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="lineBreak">
		<doc><![CDATA[
		<p>The lineBreak Component is the &lt;BR&gt; HTML equivalent.</p>
      <p>It is used often when simple HTML is not desirable : for example if a part of a page is loaded via AJAX it might be easier to have only a jsf tree memory represantation.</p>
      <p>The lineBreak Component has the following capability :
      <ul>
        <li>IStyleClassCapability</li>
		<li>IVisibilityCapability</li>
		<li>IHiddenModeCapability</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/LineBreakComponent.html">lineBreak</a> renderer is linked to the <a href="/jsdocs/index.html?f_lineBreak.html" target="_blank">f_lineBreak</a> javascript class. f_lineBreak extends f_component</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_lineBreak</td>
			<td width="50%">Defines styles for the wrapper element</td>
		</tr>
		
		</tbody>
		</table>	
      
      
]]></doc>
		<family>Basic</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="list">
		<doc><![CDATA[
      <p>The list Component is based on the standard HTML tag &lt;SELECT&gt;.</p>
      <p>The list Component has the following capabilities :
      <ul>
        <li>IMultipleSelectCapability</li>
	 	<li>IDoubleClickEventCapability</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ListComponent.html">list</a> renderer is linked to the <a href="/jsdocs/index.html?f_list.html" target="_blank">f_list</a> javascript class. f_list extends f_abstractList, fa_selectionProvider<String[]></p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_list</td>
			<td width="50%">Defines styles for the wrapper SELECT element</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="loadBundle">
		<doc><![CDATA[
		Loads a property bundle on the client side.
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="menu">
		<doc><![CDATA[
      <p>The menu Component provides a way of creating desktop style menus on web pages. It allows sub-menus, check and radio menu items and image menus. It also provides pop-up menus.</p>
      <p>The menu Component has the following capabilities :
      <ul>
        <li>IPreloadedLevelDepthCapability</li>
	<li>IMenuEventCapability</li>
	<li>ISelectionEventCapability</li>
	<li>ICheckEventCapability</li>
	<li>ICheckedValuesCapability</li>
	<li>ICheckComponent</li>
	<li>IMenuComponent</li>
	<li>IComponentValueTypeCapability</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/MenuComponent.html">menu</a> renderer is linked to the <a href="/jsdocs/index.html?f_menu.html" target="_blank">f_menu</a> javascript class. f_menu extends f_menuBase</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_menu</td>
			<td width="50%">Defines styles for the wrapper UL element. Coantains f_grid_popup and f_menu_item styles</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="menuBar">
		<doc><![CDATA[
		Describes a top-level menu bar.
]]></doc>
		<family>Menu</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="menuCheckItem">
		<doc><![CDATA[
		A menu item with a check.
]]></doc>
		<family>Menu</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="menuItem">
		<doc><![CDATA[
		A menu item
]]></doc>
		<family>Menu</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="menuRadioItem">
		<doc><![CDATA[
		A menu item with a radiobutton (see attribute GroupName)
]]></doc>
		<family></family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="menuSeparator">
		<doc><![CDATA[
		A separator Menu item
]]></doc>
		<family>Menu</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="message">
		<doc><![CDATA[
		<p>The message Component is a placeholder for error messages (only one is shown).</p>
      <p>The message Component has the following capabilities :
      <ul>
        <li>IImageSizeCapability</li>
		<li>ITextCapability</li>
		<li>ISeverityStyleClassCapability</li>
		<li>ISeverityImagesCapability</li>
		<li>IImageAccessorsCapability</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/MessageComponent.html">message</a> renderer is linked to the <a href="/jsdocs/index.html?f_message.html" target="_blank">f_message</a> javascript class. f_message extends f_component, fa_message1</p>
      
      
       <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_message</td>
			<td width="50%">Defines styles for the wrapper DIV element</td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_message_summary</td>
			<td width="50%">Defines styles for the summary error message</td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_message_detail</td>
			<td width="50%">Defines styles for the detail error message</td>
		</tr>
	
		
		</tbody>
		</table>	
      
      
]]></doc>
		<family>Basic</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="messageFieldSet">
		<doc><!--<![CDATA[
		<p>The messageFieldSet Component is a <a href="/comps/fieldSetComponent.html">fieldSet Component</a> combined with a <a href="/comps/messageComponent.html">message COmponent</a> in the title part.</p>
      <p>The messageFieldSet Component has the following capabilities :
      <ul>
        <li>IForCapability</li>
		<li>ISeverityStyleClassCapability</li>
		<li>ISeverityImagesCapability</li>
      </ul>
      </p>
      
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/MessageFieldSetComponent.html">messageFieldSet</a> renderer is linked to the <a href="/jsdocs/index.html?f_messageFieldSet.html" target="_blank">f_messageFieldSet</a> javascript class. f_messageFieldSet extends f_component</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_messageFieldSet</td>
			<td width="50%">Defines styles for the wrapper element</td>
		</tr>
		
		</tbody>
		</table>	
]]>--></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="messages">
		<doc><![CDATA[
		<p>The messages Component is a placeholder for error messages (several messages can be shown simultaneously).</p>
      <p>The messages Component has the following capabilities :
      <ul>
        <li>ISeverityStyleClassCapability</li>
      </ul>
      </p>
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/MessagesComponent.html">messages</a> renderer is linked to the <a href="/jsdocs/index.html?f_messages.html" target="_blank">f_messages</a> javascript class. f_messages extends  f_component, fa_messageText</p>
      
         <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_messages</td>
			<td width="50%">Defines styles for the wrapper  element</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Basic</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="numberEntry">
		<doc><![CDATA[ <b>NOT COMPLETE</b>
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="pager">
		<doc><![CDATA[
      <p>The pager Component is linked to the <a href="/comps/dataGridComponent.html">dataGrid Component</a>.
      It shows informations about the result set (ex: number of available pages) 
      and can give direct access to a specific page ("a la Google").</p>
      <p>The pager Component has the following capabilities :
      <ul>
        <li>IRequiredCapability</li>
		<li>IAutoTabCapability</li>
		<li>IValueChangeEventCapability</li>
		<li>IFocusStyleClassCapability</li>
		<li>ISelectionEventCapability</li>
		<li>IReadOnlyCapability</li>
		<li>INumberFormatTypeCapability</li>
		<li>ILiteralLocaleCapability</li>
		<li>IComponentLocaleCapability</li>
		<li>ISeverityStyleClassCapability</li>
		<li>IAlternateTextCapability</li>
		<li>IValidationParameters</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/PagerComponent.html">pager</a> renderer is linked to the <a href="/jsdocs/index.html?f_pager.html" target="_blank">f_pager</a> javascript class. f_pager extends f_component, fa_pager</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_pager</td>
			<td width="50%">Defines styles for the wrapper DIV element</td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_pager_button_first</td>
			<td width="50%">Defines styles for the wrapper SPAN element</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_pager_button_next</td>
			<td width="50%">Defines styles for the wrapper SPAN element</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_pager_button_last</td>
			<td width="50%">Defines styles for the wrapper SPAN element</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_pager_button_prev</td>
			<td width="50%">Defines styles for the wrapper SPAN element</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="passwordEntry">
		<doc><![CDATA[
      <p>The passwordEntry Component is based on the standard HTML tag &lt;INPUT TYPE="password"&gt; and is a <a href="/comps/textEntryComponent.html">textEntry Component</a>.</p>
      <p>The passwordEntry Component has the following capabilities :
      <ul>
        <li>Position &amp; Size</li>
        <li>Foreground &amp; Background Color</li>
        <li>Text &amp; font</li>
        <li>Help</li>
        <li>Visibility, Read-Only, Disabled</li>
      	<li>Events Handling</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/PasswordEntrykComponent.html">passwordEntry</a> renderer is linked to the <a href="/jsdocs/index.html?f_passwordEntry.html" target="_blank">f_passwordEntry</a> javascript class. f_passwordEntry extends f_textEntry</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_passwordEntry</td>
			<td width="50%">Defines styles for the INPUT element</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="progressBar">
		<doc><![CDATA[
      <p>The progressBar Component indicates the evolution of a task.</p>
      <p>The progressBar Component has the following capabilities :
      <ul>
        <li>Position &amp; Size</li>
        <li>Foreground &amp; Background Color</li>
        <li>image</li>
        <li>Margin &amp; border</li>
        <li>Help</li>
        <li>Visibility</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ProgressBarComponent.html">progressBar</a> renderer is linked to the <a href="/jsdocs/index.html?f_progressBar.html" target="_blank">f_progressBar</a> javascript class. f_progressBar extends f_component</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_progressBar</td>
			<td width="50%">Defines styles for the wrapper DIV element</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>

	<!--<componentDoc id="progressIndicator">
		<doc><![CDATA[
      <p>The progressIndicator Component indicates the evolution of a task. It uses the <a href="/comps/progressBarComponent.html">porgressBar Component</a> and add text information to it.</p>
      <p>The progressIndicator Component has the following capabilities :
      <ul>
        <li>Position &amp; Size</li>
        <li>Foreground &amp; Background Color</li>
        <li>Text, font &amp; image</li>
        <li>Margin &amp; border</li>
        <li>Help</li>
        <li>Visibility</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/LineBreakComponent.html">lineBreak</a> renderer is linked to the <a href="/jsdocs/index.html?f_lineBreak.html" target="_blank">f_lineBreak</a> javascript class. f_lineBreak extends f_component</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_lineBreak</td>
			<td width="50%">Defines styles for the wrapper element</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>

	--><componentDoc id="radioButton">
		<doc><![CDATA[
      <p>The radioButton Component is based on the standard HTML tag &lt;INPUT TYPE="radio"&gt;. It can interoperate automatically with other radioButtons from the same group.</p>
      <p>The radioButton Component has the following capabilities :
      <ul>
        <li>ITextCapability</li>
		<li>ITextDirectionCapability</li>
		<li>IHorizontalTextPositionCapability</li>
		<li>ISelectionEventCapability</li>
		<li>IReadOnlyCapability</li>
		<li>IAlternateTextCapability</li>
		<li>ISeverityStyleClassCapability</li>
		<li>IFocusStyleClassCapability</li>
		<li>ISelectedCapability</li>
		<li>IRadioValueCapability</li>
		<li>IRequiredCapability</li>
		<li>IValidationParameters</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/radioButtonComponent.html">radioButton</a> renderer is linked to the <a href="/jsdocs/index.html?f_radioButton.html" target="_blank">f_radioButton</a> javascript class. f_radioButton extends f_checkButton, fa_groupName, fa_required, fa_clientValidatorParameters</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_radioButton</td>
			<td width="50%">Defines styles for the wrapper element</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="resetButton">
		<doc><![CDATA[
      <p>The resetButton Component is based on the standard HTML tag &lt;INPUT TYPE="reset"&gt;. It is a <a href="/comps/buttonComponent.html">button Component</a>.</p>
      <p>The resetButton Component has the following capabilities :
      <ul>
        <li>Position &amp; Size</li>
        <li>Foreground &amp; Background Color</li>
        <li>Text &amp; font</li>
        <li>Help</li>
        <li>Visibility, Read-Only, Disabled</li>
      	<li>Events Handling</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ResetButtonComponent.html">resetButton</a> renderer is linked to the <a href="/jsdocs/index.html?f_resetButton.html" target="_blank">f_resetButton</a> javascript class. f_resetButton extends f_button</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_resetButton</td>
			<td width="50%">Defines styles for the wrapper element</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="ruler">
		<doc><![CDATA[
		<p>The ruler Component is the &lt;HR&gt; HTML equivalent.</p>
      <p>It is used often when simple HTML is not desirable : for example if a part of a page is loaded via AJAX it might be easier to have only a jsf tree memory represantation.</p>
      <p>The ruler Component has the following capability :
      <ul>
        <li>IPositionCapability</li>
	<li>IMarginCapability</li>
	<li>ISizeCapability</li>
	<li>IVisibilityCapability</li>
	<li>IHiddenModeCapability</li>
	<li>ILookAndFeelCapability</li>
	<li>IOrientationCapability</li>
	<li>IForegroundBackgroundColorCapability</li>
	<li>IAlignmentCapability</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/RulerComponent.html">ruler</a> renderer is linked to the <a href="/jsdocs/index.html?f_ruler.html" target="_blank">f_ruler</a> javascript class. f_ruler extends f_component</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_ruler</td>
			<td width="50%">Defines styles for the HR element</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Basic</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="selectImageItem">
		<doc><![CDATA[
		A select item (member of a selectable list) that shows an image.
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="serverData">
		<doc><![CDATA[
		Data that is only accessible on the server.
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="service">
		<doc><![CDATA[
		<p>The service Component is a non-visual component.</p>
      <p>It allows to (synchronously or asynchronously) call AJAX services from the client.</p>
      <p>The service Component has the following capability :
      <ul>
        <li>IClientDataCapability</li>
		<li>IServerDataCapability</li>
		<li>IPropertyChangeEventCapability</li>
		<li>IServiceEventCapability</li>
		<li>IFilterCapability</li>
		<li>IComponentLocaleCapability</li>
		<li>IComponentTimeZoneCapability</li>
		<li>IClientDataManager</li>
		<li>IServerDataManager </li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ServiceComponent.html">service</a> renderer is linked to the <a href="/jsdocs/index.html?f_service.html" target="_blank">f_service</a> javascript class. f_service extends f_object, fa_serializable, fa_eventTarget, fa_filterProperties, fa_commands</p>
      
    
]]></doc>
		<family>Non Visual</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="spinner">
		<doc><![CDATA[
      <p>The spinner Component is a <a href="/comps/textEntryComponent.html">textEntry Component</a> that accepts numbers and whose value can be incremented or decremented (by a parametrable step) with buttons or the keyboard arrows.</p>
      <p>The spinner Component has the following capabilities :
      <ul>
        <li>Position &amp; Size</li>
        <li>Foreground &amp; Background Color</li>
        <li>Text &amp; font</li>
        <li>Help</li>
        <li>Visibility, Read-Only, Disabled</li>
      	<li>Events Handling</li>
      	<li>limits and step</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/SpinnerComponent.html">spinner</a> renderer is linked to the <a href="/jsdocs/index.html?f_spinner.html" target="_blank">f_spinner</a> javascript class. f_spinner extends f_textEntry, fa_spinner</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_spinner</td>
			<td width="50%">Defines styles for the wrapper element</td>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_spinner_input</td>
			<td width="50%">Defines styles for the INPUT element</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_spinner_up</td>
			<td width="50%">Defines styles for the IMG element of the up button</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_spinner_down</td>
			<td width="50%">Defines styles for the IMG elemen of the down button</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="styledMessage">
		<doc><![CDATA[
		An englobing tag that changes the style class surronuding a component when a particular message is emitted for a component.
		ex : 
		&lt;v:styledMessage errorStyleClass="formErreur" for="ef1"&gt;
			&lt;v:textEntry 
				id="ef1" 
				... /&gt;
		&lt;/v:styledMessage&gt;
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="styledText">
		<doc><![CDATA[
		<p>The styledText Component is a placeholder for displaying "enhanced" text. It accepts any HTML tags. it's a <A href="/comps/textComponent.html">text Component</A></p>
      <p>The styledText Component has the following capabilities :
      <ul>
        <li>Position &amp; Size</li>
        <li>Foreground &amp; Background Color</li>
        <li>Text, font &amp; justification</li>
        <li>Margin</li>
        <li>Help</li>
        <li>Visibility</li>
      	<li>Events Handling</li>
      	<li>Association with another component</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/StyledTextComponent.html">styledText</a> renderer is linked to the <a href="/jsdocs/index.html?f_styledText.html" target="_blank">f_styledText</a> javascript class. f_lineBreak extends f_text</p>
      
     
]]></doc>
		<family>Basic</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="submitButton">
		<doc><![CDATA[
      <p>The submitButton Component is based on the standard HTML tag &lt;INPUT TYPE="submit"&gt;. It is a <a href="/comps/buttonComponent.html">button Component</a>.</p>
      <p>The submitButton Component has the following capabilities :
      <ul>
        <li>Position &amp; Size</li>
        <li>Foreground &amp; Background Color</li>
        <li>Text &amp; font</li>
        <li>Help</li>
        <li>Visibility, Read-Only, Disabled</li>
      	<li>Events Handling</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/SubmitButtonComponent.html">submitButton</a> renderer is linked to the <a href="/jsdocs/index.html?f_submitButton.html" target="_blank">f_submitButton</a> javascript class. f_submitButton extends f_button</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_imageSubmitButton</td>
			<td width="50%">Defines styles for the wrapper A element</td>
		</tr>
				
		</tbody>
		</table>	    
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="suggestTextEntry">
		<doc><![CDATA[
      <p>The suggestTextEntry is a <a href="/comps/textEntryCOmponent.html">textEntry Component</a> with an autosuggestion feature that shows in the form of a dropdown list.</p>
      <p>The suggestTextEntry Component has the following capabilities :
      <ul>
        <li>IFilterCapability</li>
		 <li>IMaxResultNumberCapability</li>
		 <li>ISuggestionEventCapability</li>
		 <li>IMenuEventCapability</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/SuggestTextEntryComponent.html">suggestTextEntry</a> renderer is linked to the <a href="/jsdocs/index.html?f_suggestTextEntry.html" target="_blank">f_suggestTextEntry</a> javascript class. f_suggestTextEntry extends f_textEntry, fa_filterProperties, fa_commands</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_suggestTextEntry</td>
			<td width="50%">Defines styles for the wrapper element</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="tab">
		<doc><![CDATA[
		An element belonging to a <a href="/comps/tabbedPaneComponent.html">tabbedPane Component</a> and holding the components.
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="tabbedPane">
		<doc><![CDATA[
      <p>The tabbedPane Component provides a way to show more information on a single page. It can download the data asynchronously via AJAX.</p>
      <p>The tabbedPane Component has the following capabilities :
      <ul>
        <li>ICloseEventCapability</li>
		 <li>IClosableCapability</li>
		 <li>IPreSelectionEventCapability</li>
		 <li>IShowValueCapability</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/TabbedPaneComponent.html">tabbedPane</a> renderer is linked to the <a href="/jsdocs/index.html?f_tabbedPane.html" target="_blank">f_tabbedPane</a> javascript class. f_tabbedPane extends f_cardBox</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_tabbedPane</td>
			<td width="50%">Defines styles for the wrapper element</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_tabbedPane_title</td>
			<td width="50%">Defines styles for the TABLE element </td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_tabbedPane_content</td>
			<td width="50%">Defines styles for the DIV element</td>
		</tr>
			<tr  style="text-align:left">
			<td width="33%">f_tabbedPane_tab</td>
			<td width="50%">Defines styles for the DIV element</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="text">
		<doc><![CDATA[
		<p>The text Component is a placeholder for displaying text.</p>
      <p>The text Component has the following capabilities :
      <ul>
        <li>ITextCapability</li>
		<li>ITextDirectionCapability</li>
		<li>IFontCapability</li>
		<li>ITextAlignmentCapability</li>
		<li>IAccessKeyCapability</li>
		<li>IForCapability</li>
		<li>ITypedComponentCapability </li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/TextComponent.html">text</a> renderer is linked to the <a href="/jsdocs/index.html?f_text.html" target="_blank">f_text</a> javascript class. f_text extends f_component</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_text</td>
			<td width="50%">Defines styles for the wrapper element</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Basic</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="textArea">
		<doc><![CDATA[
      <p>The textAreaEntry Component is based on the standard HTML tag &lt;TEXTAREA&gt; and is a <a href="/comps/textEntryComponent.html">textEntry Component</a>.</p>
      <p>The textAreaEntry Component has the following capabilities :
      <ul>
        <li>IRequiredCapability</li>
		<li>ITextCapability</li>
		<li>ITextDirectionCapability</li>
		<li>IEmptyMessageCapability</li>
		<li>IReadOnlyCapability</li>
		<li>IValueChangeEventCapability</li>
		<li>IMenuCapability</li>
		<li>IFocusStyleClassCapability</li>
		<li>ISeverityStyleClassCapability</li>
		<li>ISelectionEventCapability</li>
		<li>IAlternateTextCapability</li>
		<li>IMaxTextLengthCapability </li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/TextAreaComponent.html">textArea</a> renderer is linked to the <a href="/jsdocs/index.html?f_textArea.html" target="_blank">f_textArea</a> javascript class. f_textArea extends f_abstractEntry</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_textArea</td>
			<td width="50%">Defines styles for the wrapper element</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>
	
		<componentDoc id="scheduler">
		<doc><![CDATA[
      <p>The scheduler Component shows a planning</p>
      <p>The scheduler Component has the following capabilities :
      <ul>
        <li>IWidthCapability</li>
		<li>IHeightCapability</li>
		<li>IScrollableCapability</li>
		<li>ILiteralLocaleCapability</li>
		<li>ILiteralTimeZoneCapability</li>
		<li>IStyleClassCapability</li>
		<li>ITabIndexCapability</li>
		<li>IImmediateCapability</li>
		<li>ISelectionEventCapability </li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/SchedulerComponent.html">scheduler</a> renderer is linked to the <a href="/jsdocs/index.html?f_scheduler.html" target="_blank">f_scheduler</a> javascript class. f_scheduler extends f_component, fa_items, fa_selectionManager</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th  width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_scheduler</td>
			<td width="50%">Defines styles for the wrapper DIV element</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>
	
	
	<componentDoc id="textEditor">
		<doc><![CDATA[ 
		
		 <p>The textEditorToolFolder component is a container allowing to edit text and have a specific toolBar </p>
 
	<p>The textEditorToolFolder Component has the following capabilities : 
		<ul>
			<li>IRequiredCapability</li>
			<li>ITextCapability</li>
			<li>ITextDirectionCapability</li>
			<li>IEmptyMessageCapability</li>
			<li>IReadOnlyCapability</li>
			<li>IValueChangeEventCapability</li>
			<li>IMenuCapability</li>
			<li>IFocusStyleClassCapability</li>
			<li>ISeverityStyleClassCapability</li>
			<li>ISelectionEventCapability</li>
			<li>IAlternateTextCapability</li>
		</ul>
	</p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/TextEditorComponent.html">textEditorToolFolder</a> renderer is linked to the <a href="/jsdocs/index.html?f_textEditor.html" target="_blank">f_textEditor</a> javascript class. f_textEditor extends f_component</p>     
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_textEditor</td>
			<td width="50%">Defines styles for the wrapper DIV element</td>
		</tr>
		</tbody>
		</table>
		
	
		
		
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="textEntry">
		<doc><![CDATA[
      <p>The textEntry Component is based on the standard HTML tag &lt;INPUT TYPE="text"&gt;.</p>
      <p>The textEntry Component has the following capabilities :
      <ul>
        <li>IRequiredCapability</li>
		<li>IAutoTabCapability</li>
		<li>ITextCapability</li>
		<li>ITextDirectionCapability</li>
		<li>IEmptyMessageCapability</li>
		<li>IReadOnlyCapability</li>
		<li>IValueChangeEventCapability</li>
		<li>IMenuCapability</li>
		<li>IFocusStyleClassCapability</li>
		<li>ISeverityStyleClassCapability</li>
		<li>IAlternateTextCapability</li>
		<li>IMaxTextLengthCapability</li>
		<li>IClientValidationCapability</li>
		<li>ISelectionEventCapability</li>
		<li>IValidationParameters </li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/TextEntryComponent.html">textEntry</a> renderer is linked to the <a href="/jsdocs/index.html?f_textEntry.html" target="_blank">f_textEntry</a> javascript class. f_textEntry extends f_abstractEntry</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_textEntry</td>
			<td width="50%">Defines styles for the wrapper element</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="timeEntry">
		<doc><![CDATA[
		<p>The timeEntry Component is a specialized <a href="/comps/textEntryComponent.html">textEntry Component</a>. it sports auto-completion related to the validity of the numbers entered as a time.</p>
      <p>The timeEntry Component has the following capabilities :
      <ul>
        <li>Position &amp; Size</li>
        <li>Foreground &amp; Background Color</li>
        <li>Text, font &amp; separators</li>
        <li>Margin &amp; border</li>
        <li>Help</li>
        <li>Visibility, Read-Only, Disabled</li>
      	<li>Events Handling</li>
      	<li>Calendar functions</li>
      </ul>
      </p>
]]></doc>
		<family>Entry</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="toolBar">
		<doc><![CDATA[ 
		
		 <p>The toolBar component allows developers to easily add toolbars containing diffenrent components </p>
 
	<p>The toolBar Component has the following capabilities : 
		<ul>
				<li>IInitEventCapability</li>
			<li>IVerticalAlignmentCapability</li>
			<li>IBorderTypeCapability</li>
			<li>IImageAccessorsCapability </li>
		</ul>
	</p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ToolBarComponent.html">toolBar</a> renderer is linked to the <a href="/jsdocs/index.html?f_toolBar.html" target="_blank">f_toolBar</a> javascript class. f_toolBar extends f_component</p>     
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_toolBar</td>
			<td width="50%">Defines styles for the wrapper DIV element</td>
		</tr>
		</tbody>
		</table>
		
	
		
		
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="toolFolder">
		<doc><![CDATA[ <b>EXPERIMENTAL</b>
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="toolItem">
		<doc><![CDATA[ <b>EXPERIMENTAL</b>
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="toolItemSeparator">
		<doc><![CDATA[ <b>EXPERIMENTAL</b>
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="tree">
		<doc><![CDATA[
      <p>The tree Component shows informations in an arborescent view. 
      It can be compared to the tree found in most modern file explorer. 
      It allows contextual menus ...</p>
      <p>The tree Component has the following capabilities :
      <ul>
        <li>IDoubleClickEventCapability</li>
		<li>IRequiredCapability</li>
		<li>IScrollableCapability</li>
		<li>IBorderCapability</li>
		<li>IReadOnlyCapability</li>
		<li>IMenuCapability</li>
		<li>IShowValueCapability</li>
		<li>IOverStyleClassCapability</li>
		<li>IFilterCapability</li>
		<li>ILoadEventCapability</li>
		<li>IExpandEventCapability</li>
		<li>IPreSelectionEventCapability</li>
		<li>IDragEventCapability</li>
		<li>IDraggableCapability</li>
		<li>IDropEventCapability</li>
		<li>IDropCompleteEventCapability</li>
		<li>IDroppableCapability</li>
		<li>ICheckableCapability</li>
		<li>ICheckCardinalityCapability</li>
		<li>ICheckEventCapability</li>
		<li>ICheckedValuesCapability</li>
		<li>IClientCheckFullStateCapability</li>
		<li>ISelectableCapability</li>
		<li>ISelectionCardinalityCapability</li>
		<li>ISelectionEventCapability</li>
		<li>ISelectedValuesCapability</li>
		<li>IClientSelectionFullStateCapability</li>
		<li>IPreloadedLevelDepthCapability</li>
		<li>IExpandableCapability</li>
		<li>IExpandedValuesCapability</li>
		<li>ICheckComponent</li>
		<li>ISelectionComponent</li>
		<li>IComponentValueTypeCapability</li>
      </ul>
      </p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/TreeComponent.html">tree</a> renderer is linked to the <a href="/jsdocs/index.html?f_tree.html" target="_blank">f_tree</a> javascript class. f_tree extends f_component, fa_readOnly, fa_disabled, fa_immediate, fa_subMenu, fa_selectionManager<String[]>, fa_checkManager, fa_itemClientDatas, fa_scrollPositions, fa_overStyleClass, fa_filterProperties, fa_droppable, fa_draggable, fa_autoScroll, fa_autoOpen</p>
      
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_tree</td>
			<td width="50%">Defines styles for the wrapper DIV element</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_tree_body</td>
			<td width="50%">Defines styles for the wrapper UL element</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_tree_parent</td>
			<td width="50%">Defines styles for the wrapper LI element of the parent nodes</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_tree_depth</td>
			<td width="50%">Defines styles for the DIV element of the depth node</td>
		</tr>
		<tr  style="text-align:left">
			<td width="33%">f_tree_node</td>
			<td width="50%">Defines styles for the DIV element of the node</td>
		</tr>
		
		</tbody>
		</table>	
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>
	
	

	<componentDoc id="treeNode">
		<doc><![CDATA[
		A node belonging to a tree.
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="uiImageItem">
		<doc><![CDATA[
		A select item (member of a selectable list) that shows an image. Ricer than a selectImageItem.
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="validationParameter">
		<doc><![CDATA[
		Used to add parameters to a validator.
]]></doc>
		<family>Tag</family>
		<icon></icon>
	</componentDoc>
	
<componentDoc id="viewDialog">
		<doc><![CDATA[
      <p>The viewDialog component represents popup modal view. It is based on the standard HTML tag &lt;IFrame&gt;.  </p>
 
	<p>The viewDialog Component has the following capabilities : 
		<ul>
			<li>IImageCapability</li>
			<li>IStyleClassCapability</li>
			<li>ITextCapability</li>
			<li>ITextDirectionCapability</li>
			<li>IVisibilityCapability</li>
			<li>IDialogPriorityCapability</li>
			<li>ISizeCapability</li>
			<li>IHiddenModeCapability</li>
			<li>ILookAndFeelCapability</li>
			<li>IWAIRoleCapability</li>
			<li>ICloseEventCapability</li>
			<li>IClosableCapability</li>
			<li>IImmediateCapability</li>
			<li>IImageAccessorsCapability </li>
		</ul>
	</p>
      
       <p>The default <a href="/apidocs/index.html?org/rcfaces/core/component/ViewDialogComponent.html">viewDialog</a> renderer is linked to the <a href="/jsdocs/index.html?f_viewDialog.html" target="_blank">f_viewDialog</a> javascript class. f_viewDialog extends f_dialog, fa_immediate </p>     
      <p> Table of component style classes: </p>
		<table border="1" cellpadding="3" cellspacing="0" width="100%">
		<tbody>
		
		<tr style="text-align:left">
			<th  width="33%">Style Name</th>
			<th width="50%">Description</th>
		</tr>
		
		<tr  style="text-align:left">
			<td width="33%">f_viewDialog</td>
			<td width="50%">Defines styles for the wrapper FRAME element</td>
		</tr>
		</tbody>
		</table>
]]></doc>
		<family>Complex</family>
		<icon></icon>
	</componentDoc>


	<componentDoc id="abstractBasic">
		<doc><![CDATA[
Technical component, used as a basis for building new RCFaces components.
]]></doc>
		<family>Abstract</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="abstractCalendar">
		<doc><![CDATA[
Technical component, used as a basis for building new RCFaces components.
]]></doc>
		<family>Abstract</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="abstractCommand">
		<doc><![CDATA[
Technical component, used as a basis for building new RCFaces components.
]]></doc>
		<family>Abstract</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="abstractConverterCommand">
		<doc><![CDATA[
Technical component, used as a basis for building new RCFaces components.
]]></doc>
		<family>Abstract</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="abstractData">
		<doc><![CDATA[
Technical component, used as a basis for building new RCFaces components.
]]></doc>
		<family>Abstract</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="abstractGrid">
		<doc><![CDATA[
Technical component, used as a basis for building new RCFaces components.
]]></doc>
		<family>Abstract</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="abstractInput">
		<doc><![CDATA[
Technical component, used as a basis for building new RCFaces components.
]]></doc>
		<family>Abstract</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="abstractItem">
		<doc><![CDATA[
Technical component, used as a basis for building new RCFaces components.
]]></doc>
		<family>Abstract</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="abstractMenu">
		<doc><![CDATA[
Technical component, used as a basis for building new RCFaces components.
]]></doc>
		<family>Abstract</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="abstractMessage">
		<doc><![CDATA[
Technical component, used as a basis for building new RCFaces components.
]]></doc>
		<family>Abstract</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="abstractMessages">
		<doc><![CDATA[
Technical component, used as a basis for building new RCFaces components.
]]></doc>
		<family>Abstract</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="abstractOutput">
		<doc><![CDATA[
Technical component, used as a basis for building new RCFaces components.
]]></doc>
		<family>Abstract</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="abstractSelectMany">
		<doc><![CDATA[
Technical component, used as a basis for building new RCFaces components.
]]></doc>
		<family>Abstract</family>
		<icon></icon>
	</componentDoc>

	<componentDoc id="abstractSeparator">
		<doc><![CDATA[
Technical component, used as a basis for building new RCFaces components.
]]></doc>
		<family>Abstract</family>
		<icon></icon>
	</componentDoc>

	
	<taglib id="core">
		<display-name>RCFaces CORE components</display-name>
		<doc><![CDATA[
		A set of Components that are not dependant on a specific render-kit.
]]></doc>
	</taglib>
	
	<taglib id="html">
		<display-name>RCFaces HTML components</display-name>
		<doc><![CDATA[
		A set of components specific to the html render-kit.
]]></doc>
	</taglib>

</camelia-components>
